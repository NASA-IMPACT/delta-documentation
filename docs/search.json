[
  {
    "objectID": "no2-timeseries.html",
    "href": "no2-timeseries.html",
    "title": "veda-documentation",
    "section": "",
    "text": "import rioxarray\nimport stackstac\nfrom satsearch import Search\n\n\nstac_api_url = 'https://staging-stac.delta-backend.xyz/'\nchina_bbox = [\n    73.675,\n    18.198,\n    135.026,\n    53.459\n]\ndatetime = \"2000-01-01T00:00:00Z/2022-01-02T00:00:00Z\"\ncollection = 'no2-monthly'\n\nsearch = Search.search(\n    url=stac_api_url,\n    bbox=china_bbox,\n    datetime=datetime,\n    collections=[collection],\n    limit=1000\n)\nitems = search.items()\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1000, 'bbox': [73.675, 18.198, 135.026, 53.459], 'datetime': '2000-01-01T00:00:00Z/2022-01-02T00:00:00Z', 'collections': ['no2-monthly']}\n\n\n\nlen(items)\n\n73\n\n\n\nstack = stackstac.stack(items)\n\n\nstack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-a8afebb458dddd242ccfecc9f369d38d' (time: 73,\n                                                                band: 1,\n                                                                y: 1800, x: 3600)>\ndask.array<fetch_raster_window, shape=(73, 1, 1800, 3600), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray>\nCoordinates:\n  * time            (time) datetime64[ns] 2016-01-01 2016-02-01 ... 2022-01-01\n    id              (time) <U46 'OMI_trno2_0.10x0.10_201601_Col3_V4-no2-month...\n  * band            (band) <U11 'cog_default'\n  * x               (x) float64 -180.0 -179.9 -179.8 ... 179.7 179.8 179.9\n  * y               (y) float64 90.0 89.9 89.8 89.7 ... -89.6 -89.7 -89.8 -89.9\n    proj:epsg       int64 4326\n    proj:bbox       object {180.0, -180.0, 90.0, -90.0}\n    proj:shape      object {1800, 3600}\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, 90.0...\n    proj:transform  object {0.1, 0.0, -0.1, 1.0, -180.0, 90.0}\n    epsg            int64 4326\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    crs:         epsg:4326\n    transform:   | 0.10, 0.00,-180.00|\\n| 0.00,-0.10, 90.00|\\n| 0.00, 0.00, 1...\n    resolution:  0.1xarray.DataArray'stackstac-a8afebb458dddd242ccfecc9f369d38d'time: 73band: 1y: 1800x: 3600dask.array<chunksize=(1, 1, 1024, 1024), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         3.52 GiB \n                         8.00 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 1, 1800, 3600) \n                         (1, 1, 1024, 1024) \n                    \n                    \n                         Count \n                         738 Tasks \n                         584 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  73\n  1\n\n\n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  3600\n  1800\n  1\n\n        \n    \nCoordinates: (11)time(time)datetime64[ns]2016-01-01 ... 2022-01-01array(['2016-01-01T00:00:00.000000000', '2016-02-01T00:00:00.000000000',\n       '2016-03-01T00:00:00.000000000', '2016-04-01T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2016-06-01T00:00:00.000000000',\n       '2016-07-01T00:00:00.000000000', '2016-08-01T00:00:00.000000000',\n       '2016-09-01T00:00:00.000000000', '2016-10-01T00:00:00.000000000',\n       '2016-11-01T00:00:00.000000000', '2016-12-01T00:00:00.000000000',\n       '2017-01-01T00:00:00.000000000', '2017-02-01T00:00:00.000000000',\n       '2017-03-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-05-01T00:00:00.000000000', '2017-06-01T00:00:00.000000000',\n       '2017-07-01T00:00:00.000000000', '2017-08-01T00:00:00.000000000',\n       '2017-09-01T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2017-11-01T00:00:00.000000000', '2017-12-01T00:00:00.000000000',\n       '2018-01-01T00:00:00.000000000', '2018-02-01T00:00:00.000000000',\n       '2018-03-01T00:00:00.000000000', '2018-04-01T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2018-06-01T00:00:00.000000000',\n       '2018-07-01T00:00:00.000000000', '2018-08-01T00:00:00.000000000',\n       '2018-09-01T00:00:00.000000000', '2018-10-01T00:00:00.000000000',\n       '2018-11-01T00:00:00.000000000', '2018-12-01T00:00:00.000000000',\n       '2019-01-01T00:00:00.000000000', '2019-02-01T00:00:00.000000000',\n       '2019-03-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-05-01T00:00:00.000000000', '2019-06-01T00:00:00.000000000',\n       '2019-07-01T00:00:00.000000000', '2019-08-01T00:00:00.000000000',\n       '2019-09-01T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2019-11-01T00:00:00.000000000', '2019-12-01T00:00:00.000000000',\n       '2020-01-01T00:00:00.000000000', '2020-02-01T00:00:00.000000000',\n       '2020-03-01T00:00:00.000000000', '2020-04-01T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2020-06-01T00:00:00.000000000',\n       '2020-07-01T00:00:00.000000000', '2020-08-01T00:00:00.000000000',\n       '2020-09-01T00:00:00.000000000', '2020-10-01T00:00:00.000000000',\n       '2020-11-01T00:00:00.000000000', '2020-12-01T00:00:00.000000000',\n       '2021-01-01T00:00:00.000000000', '2021-02-01T00:00:00.000000000',\n       '2021-03-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-05-01T00:00:00.000000000', '2021-06-01T00:00:00.000000000',\n       '2021-07-01T00:00:00.000000000', '2021-08-01T00:00:00.000000000',\n       '2021-09-01T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2021-11-01T00:00:00.000000000', '2021-12-01T00:00:00.000000000',\n       '2022-01-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)<U46'OMI_trno2_0.10x0.10_201601_Col3...array(['OMI_trno2_0.10x0.10_201601_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201602_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201603_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201604_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201605_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201606_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201607_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201608_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201609_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201610_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201611_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201612_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201701_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201702_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201703_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201704_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201705_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201706_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201707_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201708_Col3_V4-no2-monthly',\n...\n       'OMI_trno2_0.10x0.10_202006_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202007_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202008_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202009_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202010_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202011_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202012_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202101_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202102_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202103_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202104_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202105_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202106_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202107_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202108_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202109_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202110_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202111_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202112_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202201_Col3_V4-no2-monthly'], dtype='<U46')band(band)<U11'cog_default'array(['cog_default'], dtype='<U11')x(x)float64-180.0 -179.9 ... 179.8 179.9array([-180. , -179.9, -179.8, ...,  179.7,  179.8,  179.9])y(y)float6490.0 89.9 89.8 ... -89.8 -89.9array([ 90. ,  89.9,  89.8, ..., -89.7, -89.8, -89.9])proj:epsg()int644326array(4326)proj:bbox()object{180.0, -180.0, 90.0, -90.0}array({180.0, -180.0, 90.0, -90.0}, dtype=object)proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, 90.0], [-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0]]]},\n      dtype=object)proj:transform()object{0.1, 0.0, -0.1, 1.0, -180.0, 90.0}array({0.1, 0.0, -0.1, 1.0, -180.0, 90.0}, dtype=object)epsg()int644326array(4326)Attributes: (4)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))crs :epsg:4326transform :| 0.10, 0.00,-180.00|\n| 0.00,-0.10, 90.00|\n| 0.00, 0.00, 1.00|resolution :0.1\n\n\n\n# Subset to Bounding Box for China\nsubset = stack.rio.clip_box(\n    minx=china_bbox[0],\n    miny=china_bbox[1],\n    maxx=china_bbox[2],\n    maxy=china_bbox[3]\n)\nsubset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-a8afebb458dddd242ccfecc9f369d38d' (time: 73,\n                                                                band: 1,\n                                                                y: 354, x: 614)>\ndask.array<getitem, shape=(73, 1, 354, 614), dtype=float64, chunksize=(1, 1, 354, 535), chunktype=numpy.ndarray>\nCoordinates:\n  * time            (time) datetime64[ns] 2016-01-01 2016-02-01 ... 2022-01-01\n    id              (time) <U46 'OMI_trno2_0.10x0.10_201601_Col3_V4-no2-month...\n  * band            (band) <U11 'cog_default'\n  * x               (x) float64 73.7 73.8 73.9 74.0 ... 134.7 134.8 134.9 135.0\n  * y               (y) float64 53.5 53.4 53.3 53.2 53.1 ... 18.5 18.4 18.3 18.2\n    proj:epsg       int64 4326\n    proj:bbox       object {90.0, 180.0, -90.0, -180.0}\n    proj:shape      object {1800, 3600}\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, 90.0...\n    proj:transform  object {0.1, 0.0, 1.0, -0.1, -180.0, 90.0}\n    epsg            int64 4326\n    spatial_ref     int64 0\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    resolution:  0.1xarray.DataArray'stackstac-a8afebb458dddd242ccfecc9f369d38d'time: 73band: 1y: 354x: 614dask.array<chunksize=(1, 1, 354, 535), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         121.06 MiB \n                         1.44 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 1, 354, 614) \n                         (1, 1, 354, 535) \n                    \n                    \n                         Count \n                         884 Tasks \n                         146 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  73\n  1\n\n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  614\n  354\n  1\n\n        \n    \nCoordinates: (12)time(time)datetime64[ns]2016-01-01 ... 2022-01-01array(['2016-01-01T00:00:00.000000000', '2016-02-01T00:00:00.000000000',\n       '2016-03-01T00:00:00.000000000', '2016-04-01T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2016-06-01T00:00:00.000000000',\n       '2016-07-01T00:00:00.000000000', '2016-08-01T00:00:00.000000000',\n       '2016-09-01T00:00:00.000000000', '2016-10-01T00:00:00.000000000',\n       '2016-11-01T00:00:00.000000000', '2016-12-01T00:00:00.000000000',\n       '2017-01-01T00:00:00.000000000', '2017-02-01T00:00:00.000000000',\n       '2017-03-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-05-01T00:00:00.000000000', '2017-06-01T00:00:00.000000000',\n       '2017-07-01T00:00:00.000000000', '2017-08-01T00:00:00.000000000',\n       '2017-09-01T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2017-11-01T00:00:00.000000000', '2017-12-01T00:00:00.000000000',\n       '2018-01-01T00:00:00.000000000', '2018-02-01T00:00:00.000000000',\n       '2018-03-01T00:00:00.000000000', '2018-04-01T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2018-06-01T00:00:00.000000000',\n       '2018-07-01T00:00:00.000000000', '2018-08-01T00:00:00.000000000',\n       '2018-09-01T00:00:00.000000000', '2018-10-01T00:00:00.000000000',\n       '2018-11-01T00:00:00.000000000', '2018-12-01T00:00:00.000000000',\n       '2019-01-01T00:00:00.000000000', '2019-02-01T00:00:00.000000000',\n       '2019-03-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-05-01T00:00:00.000000000', '2019-06-01T00:00:00.000000000',\n       '2019-07-01T00:00:00.000000000', '2019-08-01T00:00:00.000000000',\n       '2019-09-01T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2019-11-01T00:00:00.000000000', '2019-12-01T00:00:00.000000000',\n       '2020-01-01T00:00:00.000000000', '2020-02-01T00:00:00.000000000',\n       '2020-03-01T00:00:00.000000000', '2020-04-01T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2020-06-01T00:00:00.000000000',\n       '2020-07-01T00:00:00.000000000', '2020-08-01T00:00:00.000000000',\n       '2020-09-01T00:00:00.000000000', '2020-10-01T00:00:00.000000000',\n       '2020-11-01T00:00:00.000000000', '2020-12-01T00:00:00.000000000',\n       '2021-01-01T00:00:00.000000000', '2021-02-01T00:00:00.000000000',\n       '2021-03-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-05-01T00:00:00.000000000', '2021-06-01T00:00:00.000000000',\n       '2021-07-01T00:00:00.000000000', '2021-08-01T00:00:00.000000000',\n       '2021-09-01T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2021-11-01T00:00:00.000000000', '2021-12-01T00:00:00.000000000',\n       '2022-01-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)<U46'OMI_trno2_0.10x0.10_201601_Col3...array(['OMI_trno2_0.10x0.10_201601_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201602_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201603_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201604_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201605_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201606_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201607_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201608_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201609_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201610_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201611_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201612_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201701_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201702_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201703_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201704_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201705_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201706_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201707_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201708_Col3_V4-no2-monthly',\n...\n       'OMI_trno2_0.10x0.10_202006_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202007_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202008_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202009_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202010_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202011_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202012_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202101_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202102_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202103_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202104_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202105_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202106_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202107_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202108_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202109_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202110_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202111_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202112_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202201_Col3_V4-no2-monthly'], dtype='<U46')band(band)<U11'cog_default'array(['cog_default'], dtype='<U11')x(x)float6473.7 73.8 73.9 ... 134.9 135.0axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 73.7,  73.8,  73.9, ..., 134.8, 134.9, 135. ])y(y)float6453.5 53.4 53.3 ... 18.4 18.3 18.2axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([53.5, 53.4, 53.3, ..., 18.4, 18.3, 18.2])proj:epsg()int644326array(4326)proj:bbox()object{90.0, 180.0, -90.0, -180.0}array({90.0, 180.0, -90.0, -180.0}, dtype=object)proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, 90.0], [-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0]]]},\n      dtype=object)proj:transform()object{0.1, 0.0, 1.0, -0.1, -180.0, 90.0}array({0.1, 0.0, 1.0, -0.1, -180.0, 90.0}, dtype=object)epsg()int644326array(4326)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :73.65000000000002 0.09999999999999998 0.0 53.55 0.0 -0.09999999999999999array(0)Attributes: (2)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))resolution :0.1\n\n\n\n# select the band default\ndata_band = subset.sel(band='cog_default')\ndata_band\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-a8afebb458dddd242ccfecc9f369d38d' (time: 73,\n                                                                y: 354, x: 614)>\ndask.array<getitem, shape=(73, 354, 614), dtype=float64, chunksize=(1, 354, 535), chunktype=numpy.ndarray>\nCoordinates:\n  * time            (time) datetime64[ns] 2016-01-01 2016-02-01 ... 2022-01-01\n    id              (time) <U46 'OMI_trno2_0.10x0.10_201601_Col3_V4-no2-month...\n    band            <U11 'cog_default'\n  * x               (x) float64 73.7 73.8 73.9 74.0 ... 134.7 134.8 134.9 135.0\n  * y               (y) float64 53.5 53.4 53.3 53.2 53.1 ... 18.5 18.4 18.3 18.2\n    proj:epsg       int64 4326\n    proj:bbox       object {90.0, 180.0, -90.0, -180.0}\n    proj:shape      object {1800, 3600}\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, 90.0...\n    proj:transform  object {0.1, 0.0, 1.0, -0.1, -180.0, 90.0}\n    epsg            int64 4326\n    spatial_ref     int64 0\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    resolution:  0.1xarray.DataArray'stackstac-a8afebb458dddd242ccfecc9f369d38d'time: 73y: 354x: 614dask.array<chunksize=(1, 354, 535), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         121.06 MiB \n                         1.44 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 354, 614) \n                         (1, 354, 535) \n                    \n                    \n                         Count \n                         1030 Tasks \n                         146 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  614\n  354\n  73\n\n        \n    \nCoordinates: (12)time(time)datetime64[ns]2016-01-01 ... 2022-01-01array(['2016-01-01T00:00:00.000000000', '2016-02-01T00:00:00.000000000',\n       '2016-03-01T00:00:00.000000000', '2016-04-01T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2016-06-01T00:00:00.000000000',\n       '2016-07-01T00:00:00.000000000', '2016-08-01T00:00:00.000000000',\n       '2016-09-01T00:00:00.000000000', '2016-10-01T00:00:00.000000000',\n       '2016-11-01T00:00:00.000000000', '2016-12-01T00:00:00.000000000',\n       '2017-01-01T00:00:00.000000000', '2017-02-01T00:00:00.000000000',\n       '2017-03-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-05-01T00:00:00.000000000', '2017-06-01T00:00:00.000000000',\n       '2017-07-01T00:00:00.000000000', '2017-08-01T00:00:00.000000000',\n       '2017-09-01T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2017-11-01T00:00:00.000000000', '2017-12-01T00:00:00.000000000',\n       '2018-01-01T00:00:00.000000000', '2018-02-01T00:00:00.000000000',\n       '2018-03-01T00:00:00.000000000', '2018-04-01T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2018-06-01T00:00:00.000000000',\n       '2018-07-01T00:00:00.000000000', '2018-08-01T00:00:00.000000000',\n       '2018-09-01T00:00:00.000000000', '2018-10-01T00:00:00.000000000',\n       '2018-11-01T00:00:00.000000000', '2018-12-01T00:00:00.000000000',\n       '2019-01-01T00:00:00.000000000', '2019-02-01T00:00:00.000000000',\n       '2019-03-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-05-01T00:00:00.000000000', '2019-06-01T00:00:00.000000000',\n       '2019-07-01T00:00:00.000000000', '2019-08-01T00:00:00.000000000',\n       '2019-09-01T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2019-11-01T00:00:00.000000000', '2019-12-01T00:00:00.000000000',\n       '2020-01-01T00:00:00.000000000', '2020-02-01T00:00:00.000000000',\n       '2020-03-01T00:00:00.000000000', '2020-04-01T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2020-06-01T00:00:00.000000000',\n       '2020-07-01T00:00:00.000000000', '2020-08-01T00:00:00.000000000',\n       '2020-09-01T00:00:00.000000000', '2020-10-01T00:00:00.000000000',\n       '2020-11-01T00:00:00.000000000', '2020-12-01T00:00:00.000000000',\n       '2021-01-01T00:00:00.000000000', '2021-02-01T00:00:00.000000000',\n       '2021-03-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-05-01T00:00:00.000000000', '2021-06-01T00:00:00.000000000',\n       '2021-07-01T00:00:00.000000000', '2021-08-01T00:00:00.000000000',\n       '2021-09-01T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2021-11-01T00:00:00.000000000', '2021-12-01T00:00:00.000000000',\n       '2022-01-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)<U46'OMI_trno2_0.10x0.10_201601_Col3...array(['OMI_trno2_0.10x0.10_201601_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201602_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201603_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201604_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201605_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201606_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201607_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201608_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201609_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201610_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201611_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201612_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201701_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201702_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201703_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201704_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201705_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201706_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201707_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201708_Col3_V4-no2-monthly',\n...\n       'OMI_trno2_0.10x0.10_202006_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202007_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202008_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202009_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202010_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202011_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202012_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202101_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202102_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202103_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202104_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202105_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202106_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202107_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202108_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202109_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202110_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202111_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202112_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202201_Col3_V4-no2-monthly'], dtype='<U46')band()<U11'cog_default'array('cog_default', dtype='<U11')x(x)float6473.7 73.8 73.9 ... 134.9 135.0axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 73.7,  73.8,  73.9, ..., 134.8, 134.9, 135. ])y(y)float6453.5 53.4 53.3 ... 18.4 18.3 18.2axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([53.5, 53.4, 53.3, ..., 18.4, 18.3, 18.2])proj:epsg()int644326array(4326)proj:bbox()object{90.0, 180.0, -90.0, -180.0}array({90.0, 180.0, -90.0, -180.0}, dtype=object)proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, 90.0], [-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0]]]},\n      dtype=object)proj:transform()object{0.1, 0.0, 1.0, -0.1, -180.0, 90.0}array({0.1, 0.0, 1.0, -0.1, -180.0, 90.0}, dtype=object)epsg()int644326array(4326)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :73.65000000000002 0.09999999999999998 0.0 53.55 0.0 -0.09999999999999999array(0)Attributes: (2)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))resolution :0.1\n\n\n\n# Group data into months\nno2_months = data_band.groupby('time')\n\n\n# Average over entire spatial bounding box for each month\nmonthly_mean_no2 = no2_months.mean(dim=('x', 'y'))\n\n\n%%time\nmonthly_mean_no2.plot()\n\nCPU times: user 6.72 s, sys: 2.58 s, total: 9.29 s\nWall time: 35.8 s"
  },
  {
    "objectID": "list-collections.html",
    "href": "list-collections.html",
    "title": "veda-documentation",
    "section": "",
    "text": "from pystac import Catalog\n\n\nstac_api_url = 'https://staging-stac.delta-backend.xyz/'\ncatalog = Catalog.from_file(stac_api_url)\n\n\nfor root, subcatalogs, items in catalog.walk():\n    # subcats represents any catalogs or collections owned by root\n    for cat in subcatalogs:\n        print(cat.id)\n\nsocial-vulnerability-index-housing-nopop\nOMI_trno2-COG\nOMSO2PCA-COG\nsocial-vulnerability-index-overall\nsocial-vulnerability-index-overall-nopop\nsocial-vulnerability-index-household\nsocial-vulnerability-index-household-nopop\nno2-monthly\nno2-monthly-diff\nfacebook_population_density\nsocial-vulnerability-index-minority\nsocial-vulnerability-index-minority-nopop\nsocial-vulnerability-index-socioeconomic\nsocial-vulnerability-index-socioeconomic-nopop\nsocial-vulnerability-index-housing\nblue-tarp-detection\nblue-tarp-planetscope\nnightlights-hd-3bands\nnightlights-hd-monthly\nMO_NPP_npp_vgpm\nHLSL30.002\nHLSS30.002"
  },
  {
    "objectID": "tools-and-examples.html",
    "href": "tools-and-examples.html",
    "title": "veda-documentation",
    "section": "",
    "text": "These notebooks use:\n\npystac: PySTAC is a library for working with SpatioTemporal Asset Catalogs (STAC) in Python 3.\nrioxarray: rasterio xarray extension\nsat-search: Sat-search is a Python 3 library and a command line tool for discovering and downloading publicly available satellite imagery using STAC compliant API.\nstackstac: stackstac.stack turns a STAC collection into a lazy xarray.DataArray, backed by dask.\n\n\n\n\nlist-collections.ipynb shows how to use pystac to list all the collections in the VEDA API.\nno2-timeseries.ipynb shows how to use stackstac, satsearch and rioxarray to create a timeseries.\n\nRun the notebooks with"
  },
  {
    "objectID": "veda-apis.html",
    "href": "veda-apis.html",
    "title": "veda-documentation",
    "section": "",
    "text": "The VEDA API source code is currently stored in a private repository: delta-backend but is based off eoAPI\n\n\n\n\n\nSTAC API (metadata): https://dev-stac.delta-backend.xyz/docs\nList collections: https://dev-stac.delta-backend.xyz/collections\nRaster API (tiling): https://dev-raster.delta-backend.xyz/docs\nSTAC viewer (geojson feature results of basic STAC searches): https://dev-stac.delta-backend.xyz/index.html\nSTAC browser (interactive STAC catalog browser): http://delta-dev-stac-browser.s3-website-us-east-1.amazonaws.com. Read more about the development of this browser here\n\n\n\n\n\nSTAC API (metadata): https://staging-stac.delta-backend.xyz/docs\nList collections: https://staging-stac.delta-backend.xyz/collections\nRaster API (tiling): https://staging-raster.delta-backend.xyz/docs\nSTAC viewer (geojson feature results of basic STAC searches): https://staging-stac.delta-backend.xyz/index.html\nSTAC browser (interactive STAC catalog browser): http://delta-staging-stac-browser.s3-website-us-east-1.amazonaws.com. Read more about the development of this browser here"
  },
  {
    "objectID": "list-items.html",
    "href": "list-items.html",
    "title": "veda-documentation",
    "section": "",
    "text": "from satsearch import Search\nfrom pystac import Catalog\n\n\nstac_api_url = 'https://staging-stac.delta-backend.xyz/'\ncatalog = Catalog.from_file(stac_api_url)\n\n\ncollections = []\n\nfor root, subcatalogs, _ in catalog.walk():\n    # subcats represents any catalogs or collections owned by root\n    for cat in subcatalogs:\n        collections.append(cat.id)\n        \ncollections\n\n['social-vulnerability-index-housing-nopop',\n 'OMI_trno2-COG',\n 'OMSO2PCA-COG',\n 'social-vulnerability-index-overall',\n 'social-vulnerability-index-overall-nopop',\n 'social-vulnerability-index-household',\n 'social-vulnerability-index-household-nopop',\n 'no2-monthly',\n 'no2-monthly-diff',\n 'facebook_population_density',\n 'social-vulnerability-index-minority',\n 'social-vulnerability-index-minority-nopop',\n 'social-vulnerability-index-socioeconomic',\n 'social-vulnerability-index-socioeconomic-nopop',\n 'social-vulnerability-index-housing',\n 'blue-tarp-detection',\n 'blue-tarp-planetscope',\n 'nightlights-hd-3bands',\n 'nightlights-hd-monthly',\n 'MO_NPP_npp_vgpm',\n 'HLSL30.002',\n 'HLSS30.002']\n\n\n\nfirst_item_locations = []\nfor collection in collections:\n    search = Search.search(\n        url=stac_api_url,\n        collections=[collection],\n        limit=1\n    )\n    location = search.items()[0].assets['cog_default']['href']\n    first_item_locations.append(location)\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-housing-nopop']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['OMI_trno2-COG']}\n\n\nThere are more items found (17) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['OMSO2PCA-COG']}\n\n\nThere are more items found (17) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-overall']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-overall-nopop']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-household']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-household-nopop']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['no2-monthly']}\n\n\nThere are more items found (74) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['no2-monthly-diff']}\n\n\nThere are more items found (86) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['facebook_population_density']}\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-minority']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-minority-nopop']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-socioeconomic']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-socioeconomic-nopop']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['social-vulnerability-index-housing']}\n\n\nThere are more items found (5) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['blue-tarp-detection']}\n\n\nThere are more items found (162) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['blue-tarp-planetscope']}\n\n\nThere are more items found (162) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['nightlights-hd-3bands']}\n\n\nThere are more items found (6) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['nightlights-hd-monthly']}\n\n\nThere are more items found (120) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['MO_NPP_npp_vgpm']}\n\n\nThere are more items found (12) than the limit (1) provided.\n\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1, 'collections': ['HLSL30.002']}\n\n\nThere are more items found (226) than the limit (1) provided.\n\n\nSatSearchError: {\"message\":\"Service Unavailable\"}\n\n\n\nfirst_item_locations\n\n['s3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_housing_wgs84_nopop_cog.tif',\n 's3://climatedashboard-data/OMI_trno2-COG/OMI_trno2_0.10x0.10_2021_Col3_V4.tif',\n 's3://climatedashboard-data/OMSO2PCA-COG/OMSO2PCA_LUT_SCD_2021.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_overall_wgs84_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_overall_wgs84_nopop_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_household_wgs84_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_household_wgs84_nopop_cog.tif',\n 's3://covid-eo-data/OMNO2d_HRM/OMI_trno2_0.10x0.10_202202_Col3_V4.nc.tif',\n 's3://covid-eo-data/OMNO2d_HRMDifference/OMI_trno2_0.10x0.10_202202_Col3_V4.nc.tif',\n 's3://climatedashboard-data/facebook_population_density/hrsl_general_latest_global_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_minority_wgs84_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_minority_wgs84_nopop_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_socioeconomic_wgs84_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_socioeconomic_wgs84_nopop_cog.tif',\n 's3://climatedashboard-data/social_vulnerability_index/svi_2018_tract_housing_wgs84_cog.tif',\n 's3://climatedashboard-data/Hurricane_Ida_Blue_Tarps/70130_detections_2022-02-12.tif',\n 's3://climatedashboard-data/Hurricane_Ida_Blue_Tarps/70130_raw_2022-02-12.tif',\n 's3://climatedashboard-data/delivery/FinalBMHD_Ida2021/BMHD_Ida_NO_LA_2021-09-09.tif',\n 's3://climatedashboard-data/bmhd_30m_monthly_bkp/BMHD_VNP46A2_wu_202103_cog.tif',\n 's3://climatedashboard-data/delivery/MO_NPP_npp_vgpm/A_202012.L3m_MO_NPP_npp_vgpm_4km.tif']"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "veda-documentation",
    "section": "",
    "text": "Documentation for the various APIs for the datasets maintained by NASA VEDA project.\nExample notebooks on how to use those APIs and datasets.\nRun the notebooks with"
  }
]