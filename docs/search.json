[
  {
    "objectID": "list-collections.html",
    "href": "list-collections.html",
    "title": "veda-documentation",
    "section": "",
    "text": "from pystac import Catalog\n\n\nstac_api_url = 'https://staging-stac.delta-backend.xyz/'\ncatalog = Catalog.from_file(stac_api_url)\n\n\nfor root, subcatalogs, items in catalog.walk():\n    # subcats represents any catalogs or collections owned by root\n    for cat in subcatalogs:\n        print(cat.id)\n\nsocial-vulnerability-index-housing-nopop\nnightlights-hd-monthly\ngrdi-v1-built\nMO_NPP_npp_vgpm\nHLSS30.002\nHLSL30.002\nOMI_trno2-COG\nno2-monthly-diff\nsocial-vulnerability-index-household\nsocial-vulnerability-index-household-nopop\nsocial-vulnerability-index-minority\ngrdi-shdi-raster\nno2-monthly\nfacebook_population_density\ngrdi-vnl-slope-raster\ngrdi-vnl-raster\nsocial-vulnerability-index-socioeconomic\nsocial-vulnerability-index-socioeconomic-nopop\nsocial-vulnerability-index-housing\nblue-tarp-detection\nblue-tarp-planetscope\ngrdi-v1-raster\nOMSO2PCA-COG\nsocial-vulnerability-index-overall-nopop\ngrdi-filled-missing-values-count\nsocial-vulnerability-index-overall\nIS2SITMOGR4\ngrdi-cdr-raster\nsocial-vulnerability-index-minority-nopop\nnceo_africa_2017\ngeoglam\ngrdi-imr-raster\nnightlights-hd-3bands"
  },
  {
    "objectID": "tools-and-examples.html",
    "href": "tools-and-examples.html",
    "title": "veda-documentation",
    "section": "",
    "text": "These notebooks use:\n\npystac: PySTAC is a library for working with SpatioTemporal Asset Catalogs (STAC) in Python 3.\nrioxarray: rasterio xarray extension\nsat-search: Sat-search is a Python 3 library and a command line tool for discovering and downloading publicly available satellite imagery using STAC compliant API.\nstackstac: stackstac.stack turns a STAC collection into a lazy xarray.DataArray, backed by dask.\n\n\n\n\nlist-collections.ipynb shows how to use pystac to list all the collections in the VEDA API.\nno2-timeseries.ipynb shows how to use stackstac, satsearch and rioxarray to create a timeseries.\n\nRun the notebooks with"
  },
  {
    "objectID": "veda-apis.html",
    "href": "veda-apis.html",
    "title": "veda-documentation",
    "section": "",
    "text": "The VEDA API source code is currently stored in a private repository: delta-backend but is based off eoAPI\n\n\n\n\n\nSTAC API (metadata): https://dev-stac.delta-backend.xyz/docs\nList collections: https://dev-stac.delta-backend.xyz/collections\nRaster API (tiling): https://dev-raster.delta-backend.xyz/docs\nSTAC viewer: https://dev-stac.delta-backend.xyz/index.html\n\n\n\n\n\nSTAC API (metadata): https://staging-stac.delta-backend.xyz/docs\nList collections: https://staging-stac.delta-backend.xyz/collections\nRaster API (tiling): https://staging-raster.delta-backend.xyz/docs\nSTAC viewer: https://staging-stac.delta-backend.xyz/index.html"
  },
  {
    "objectID": "monthly-omi-no2-timeseries-rioxarray-stackstac.html",
    "href": "monthly-omi-no2-timeseries-rioxarray-stackstac.html",
    "title": "veda-documentation",
    "section": "",
    "text": "This notebook demonstrates how to generate a timeseries via rioxarray, satsarch and stackstac.\n\nAuthor: Aimee Barciauskas\nLasted Updated Date: May 13, 2022\n\n\nimport rioxarray\nimport stackstac\nfrom satsearch import Search\n\n\n\n\nstac_api_url = 'https://staging-stac.delta-backend.xyz/'\nchina_bbox = [\n    73.675,\n    18.198,\n    135.026,\n    53.459\n]\ndatetime = \"2000-01-01T00:00:00Z/2022-01-02T00:00:00Z\"\ncollection = 'no2-monthly'\n\nsearch = Search.search(\n    url=stac_api_url,\n    bbox=china_bbox,\n    datetime=datetime,\n    collections=[collection],\n    limit=1000\n)\nitems = search.items()\n\n\nlen(items)\n\n73\n\n\n\n\n\n\nstack = stackstac.stack(items)\nstack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-7e8e82989d54d2f1c178e93b95617dd4' (time: 73,\n                                                                band: 1,\n                                                                y: 1800, x: 3600)>\ndask.array<fetch_raster_window, shape=(73, 1, 1800, 3600), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray>\nCoordinates:\n  * time            (time) datetime64[ns] 2016-01-01 2016-02-01 ... 2022-01-01\n    id              (time) <U46 'OMI_trno2_0.10x0.10_201601_Col3_V4-no2-month...\n  * band            (band) <U11 'cog_default'\n  * x               (x) float64 -180.0 -179.9 -179.8 ... 179.7 179.8 179.9\n  * y               (y) float64 90.0 89.9 89.8 89.7 ... -89.6 -89.7 -89.8 -89.9\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, 90.0...\n    proj:epsg       int64 4326\n    proj:bbox       object {180.0, -180.0, 90.0, -90.0}\n    proj:shape      object {1800, 3600}\n    proj:transform  object {0.1, 0.0, -0.1, 1.0, -180.0, 90.0}\n    epsg            int64 4326\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    crs:         epsg:4326\n    transform:   | 0.10, 0.00,-180.00|\\n| 0.00,-0.10, 90.00|\\n| 0.00, 0.00, 1...\n    resolution:  0.1xarray.DataArray'stackstac-7e8e82989d54d2f1c178e93b95617dd4'time: 73band: 1y: 1800x: 3600dask.array<chunksize=(1, 1, 1024, 1024), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         3.52 GiB \n                         8.00 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 1, 1800, 3600) \n                         (1, 1, 1024, 1024) \n                    \n                    \n                         Count \n                         730 Tasks \n                         584 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  73\n  1\n\n\n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  3600\n  1800\n  1\n\n        \n    \nCoordinates: (11)time(time)datetime64[ns]2016-01-01 ... 2022-01-01array(['2016-01-01T00:00:00.000000000', '2016-02-01T00:00:00.000000000',\n       '2016-03-01T00:00:00.000000000', '2016-04-01T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2016-06-01T00:00:00.000000000',\n       '2016-07-01T00:00:00.000000000', '2016-08-01T00:00:00.000000000',\n       '2016-09-01T00:00:00.000000000', '2016-10-01T00:00:00.000000000',\n       '2016-11-01T00:00:00.000000000', '2016-12-01T00:00:00.000000000',\n       '2017-01-01T00:00:00.000000000', '2017-02-01T00:00:00.000000000',\n       '2017-03-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-05-01T00:00:00.000000000', '2017-06-01T00:00:00.000000000',\n       '2017-07-01T00:00:00.000000000', '2017-08-01T00:00:00.000000000',\n       '2017-09-01T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2017-11-01T00:00:00.000000000', '2017-12-01T00:00:00.000000000',\n       '2018-01-01T00:00:00.000000000', '2018-02-01T00:00:00.000000000',\n       '2018-03-01T00:00:00.000000000', '2018-04-01T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2018-06-01T00:00:00.000000000',\n       '2018-07-01T00:00:00.000000000', '2018-08-01T00:00:00.000000000',\n       '2018-09-01T00:00:00.000000000', '2018-10-01T00:00:00.000000000',\n       '2018-11-01T00:00:00.000000000', '2018-12-01T00:00:00.000000000',\n       '2019-01-01T00:00:00.000000000', '2019-02-01T00:00:00.000000000',\n       '2019-03-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-05-01T00:00:00.000000000', '2019-06-01T00:00:00.000000000',\n       '2019-07-01T00:00:00.000000000', '2019-08-01T00:00:00.000000000',\n       '2019-09-01T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2019-11-01T00:00:00.000000000', '2019-12-01T00:00:00.000000000',\n       '2020-01-01T00:00:00.000000000', '2020-02-01T00:00:00.000000000',\n       '2020-03-01T00:00:00.000000000', '2020-04-01T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2020-06-01T00:00:00.000000000',\n       '2020-07-01T00:00:00.000000000', '2020-08-01T00:00:00.000000000',\n       '2020-09-01T00:00:00.000000000', '2020-10-01T00:00:00.000000000',\n       '2020-11-01T00:00:00.000000000', '2020-12-01T00:00:00.000000000',\n       '2021-01-01T00:00:00.000000000', '2021-02-01T00:00:00.000000000',\n       '2021-03-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-05-01T00:00:00.000000000', '2021-06-01T00:00:00.000000000',\n       '2021-07-01T00:00:00.000000000', '2021-08-01T00:00:00.000000000',\n       '2021-09-01T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2021-11-01T00:00:00.000000000', '2021-12-01T00:00:00.000000000',\n       '2022-01-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)<U46'OMI_trno2_0.10x0.10_201601_Col3...array(['OMI_trno2_0.10x0.10_201601_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201602_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201603_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201604_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201605_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201606_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201607_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201608_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201609_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201610_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201611_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201612_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201701_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201702_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201703_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201704_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201705_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201706_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201707_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201708_Col3_V4-no2-monthly',\n...\n       'OMI_trno2_0.10x0.10_202006_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202007_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202008_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202009_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202010_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202011_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202012_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202101_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202102_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202103_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202104_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202105_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202106_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202107_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202108_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202109_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202110_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202111_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202112_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202201_Col3_V4-no2-monthly'], dtype='<U46')band(band)<U11'cog_default'array(['cog_default'], dtype='<U11')x(x)float64-180.0 -179.9 ... 179.8 179.9array([-180. , -179.9, -179.8, ...,  179.7,  179.8,  179.9])y(y)float6490.0 89.9 89.8 ... -89.8 -89.9array([ 90. ,  89.9,  89.8, ..., -89.7, -89.8, -89.9])proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, 90.0], [-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0]]]},\n      dtype=object)proj:epsg()int644326array(4326)proj:bbox()object{180.0, -180.0, 90.0, -90.0}array({180.0, -180.0, 90.0, -90.0}, dtype=object)proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:transform()object{0.1, 0.0, -0.1, 1.0, -180.0, 90.0}array({0.1, 0.0, -0.1, 1.0, -180.0, 90.0}, dtype=object)epsg()int644326array(4326)Attributes: (4)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))crs :epsg:4326transform :| 0.10, 0.00,-180.00|\n| 0.00,-0.10, 90.00|\n| 0.00, 0.00, 1.00|resolution :0.1\n\n\n\n\n\n\n# Subset to Bounding Box for China\nsubset = stack.rio.clip_box(\n    minx=china_bbox[0],\n    miny=china_bbox[1],\n    maxx=china_bbox[2],\n    maxy=china_bbox[3]\n)\nsubset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-0e5c1d761e250551f505585d46ddfff0' (time: 73,\n                                                                band: 1,\n                                                                y: 354, x: 614)>\ndask.array<getitem, shape=(73, 1, 354, 614), dtype=float64, chunksize=(1, 1, 354, 535), chunktype=numpy.ndarray>\nCoordinates:\n  * time            (time) datetime64[ns] 2016-01-01 2016-02-01 ... 2022-01-01\n    id              (time) <U46 'OMI_trno2_0.10x0.10_201601_Col3_V4-no2-month...\n  * band            (band) <U11 'cog_default'\n  * x               (x) float64 73.7 73.8 73.9 74.0 ... 134.7 134.8 134.9 135.0\n  * y               (y) float64 53.5 53.4 53.3 53.2 53.1 ... 18.5 18.4 18.3 18.2\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, 90.0...\n    proj:epsg       int64 4326\n    proj:bbox       object {90.0, 180.0, -90.0, -180.0}\n    proj:shape      object {1800, 3600}\n    proj:transform  object {0.1, 0.0, 1.0, -0.1, -180.0, 90.0}\n    epsg            int64 4326\n    spatial_ref     int64 0\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    resolution:  0.1xarray.DataArray'stackstac-0e5c1d761e250551f505585d46ddfff0'time: 73band: 1y: 354x: 614dask.array<chunksize=(1, 1, 354, 535), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         121.06 MiB \n                         1.44 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 1, 354, 614) \n                         (1, 1, 354, 535) \n                    \n                    \n                         Count \n                         876 Tasks \n                         146 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  73\n  1\n\n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  614\n  354\n  1\n\n        \n    \nCoordinates: (12)time(time)datetime64[ns]2016-01-01 ... 2022-01-01array(['2016-01-01T00:00:00.000000000', '2016-02-01T00:00:00.000000000',\n       '2016-03-01T00:00:00.000000000', '2016-04-01T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2016-06-01T00:00:00.000000000',\n       '2016-07-01T00:00:00.000000000', '2016-08-01T00:00:00.000000000',\n       '2016-09-01T00:00:00.000000000', '2016-10-01T00:00:00.000000000',\n       '2016-11-01T00:00:00.000000000', '2016-12-01T00:00:00.000000000',\n       '2017-01-01T00:00:00.000000000', '2017-02-01T00:00:00.000000000',\n       '2017-03-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-05-01T00:00:00.000000000', '2017-06-01T00:00:00.000000000',\n       '2017-07-01T00:00:00.000000000', '2017-08-01T00:00:00.000000000',\n       '2017-09-01T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2017-11-01T00:00:00.000000000', '2017-12-01T00:00:00.000000000',\n       '2018-01-01T00:00:00.000000000', '2018-02-01T00:00:00.000000000',\n       '2018-03-01T00:00:00.000000000', '2018-04-01T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2018-06-01T00:00:00.000000000',\n       '2018-07-01T00:00:00.000000000', '2018-08-01T00:00:00.000000000',\n       '2018-09-01T00:00:00.000000000', '2018-10-01T00:00:00.000000000',\n       '2018-11-01T00:00:00.000000000', '2018-12-01T00:00:00.000000000',\n       '2019-01-01T00:00:00.000000000', '2019-02-01T00:00:00.000000000',\n       '2019-03-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-05-01T00:00:00.000000000', '2019-06-01T00:00:00.000000000',\n       '2019-07-01T00:00:00.000000000', '2019-08-01T00:00:00.000000000',\n       '2019-09-01T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2019-11-01T00:00:00.000000000', '2019-12-01T00:00:00.000000000',\n       '2020-01-01T00:00:00.000000000', '2020-02-01T00:00:00.000000000',\n       '2020-03-01T00:00:00.000000000', '2020-04-01T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2020-06-01T00:00:00.000000000',\n       '2020-07-01T00:00:00.000000000', '2020-08-01T00:00:00.000000000',\n       '2020-09-01T00:00:00.000000000', '2020-10-01T00:00:00.000000000',\n       '2020-11-01T00:00:00.000000000', '2020-12-01T00:00:00.000000000',\n       '2021-01-01T00:00:00.000000000', '2021-02-01T00:00:00.000000000',\n       '2021-03-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-05-01T00:00:00.000000000', '2021-06-01T00:00:00.000000000',\n       '2021-07-01T00:00:00.000000000', '2021-08-01T00:00:00.000000000',\n       '2021-09-01T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2021-11-01T00:00:00.000000000', '2021-12-01T00:00:00.000000000',\n       '2022-01-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)<U46'OMI_trno2_0.10x0.10_201601_Col3...array(['OMI_trno2_0.10x0.10_201601_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201602_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201603_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201604_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201605_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201606_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201607_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201608_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201609_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201610_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201611_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201612_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201701_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201702_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201703_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201704_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201705_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201706_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201707_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201708_Col3_V4-no2-monthly',\n...\n       'OMI_trno2_0.10x0.10_202006_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202007_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202008_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202009_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202010_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202011_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202012_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202101_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202102_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202103_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202104_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202105_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202106_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202107_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202108_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202109_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202110_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202111_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202112_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202201_Col3_V4-no2-monthly'], dtype='<U46')band(band)<U11'cog_default'array(['cog_default'], dtype='<U11')x(x)float6473.7 73.8 73.9 ... 134.9 135.0axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 73.7,  73.8,  73.9, ..., 134.8, 134.9, 135. ])y(y)float6453.5 53.4 53.3 ... 18.4 18.3 18.2axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([53.5, 53.4, 53.3, ..., 18.4, 18.3, 18.2])proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, 90.0], [-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0]]]},\n      dtype=object)proj:epsg()int644326array(4326)proj:bbox()object{90.0, 180.0, -90.0, -180.0}array({90.0, 180.0, -90.0, -180.0}, dtype=object)proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:transform()object{0.1, 0.0, 1.0, -0.1, -180.0, 90.0}array({0.1, 0.0, 1.0, -0.1, -180.0, 90.0}, dtype=object)epsg()int644326array(4326)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :73.65000000000002 0.09999999999999998 0.0 53.55 0.0 -0.09999999999999999array(0)Attributes: (2)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))resolution :0.1\n\n\n\n\n\nThere is just one band in this case, cog_default.\n\n# select the band default\ndata_band = subset.sel(band='cog_default')\ndata_band\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-0e5c1d761e250551f505585d46ddfff0' (time: 73,\n                                                                y: 354, x: 614)>\ndask.array<getitem, shape=(73, 354, 614), dtype=float64, chunksize=(1, 354, 535), chunktype=numpy.ndarray>\nCoordinates:\n  * time            (time) datetime64[ns] 2016-01-01 2016-02-01 ... 2022-01-01\n    id              (time) <U46 'OMI_trno2_0.10x0.10_201601_Col3_V4-no2-month...\n    band            <U11 'cog_default'\n  * x               (x) float64 73.7 73.8 73.9 74.0 ... 134.7 134.8 134.9 135.0\n  * y               (y) float64 53.5 53.4 53.3 53.2 53.1 ... 18.5 18.4 18.3 18.2\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, 90.0...\n    proj:epsg       int64 4326\n    proj:bbox       object {90.0, 180.0, -90.0, -180.0}\n    proj:shape      object {1800, 3600}\n    proj:transform  object {0.1, 0.0, 1.0, -0.1, -180.0, 90.0}\n    epsg            int64 4326\n    spatial_ref     int64 0\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    resolution:  0.1xarray.DataArray'stackstac-0e5c1d761e250551f505585d46ddfff0'time: 73y: 354x: 614dask.array<chunksize=(1, 354, 535), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         121.06 MiB \n                         1.44 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 354, 614) \n                         (1, 354, 535) \n                    \n                    \n                         Count \n                         1022 Tasks \n                         146 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  614\n  354\n  73\n\n        \n    \nCoordinates: (12)time(time)datetime64[ns]2016-01-01 ... 2022-01-01array(['2016-01-01T00:00:00.000000000', '2016-02-01T00:00:00.000000000',\n       '2016-03-01T00:00:00.000000000', '2016-04-01T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2016-06-01T00:00:00.000000000',\n       '2016-07-01T00:00:00.000000000', '2016-08-01T00:00:00.000000000',\n       '2016-09-01T00:00:00.000000000', '2016-10-01T00:00:00.000000000',\n       '2016-11-01T00:00:00.000000000', '2016-12-01T00:00:00.000000000',\n       '2017-01-01T00:00:00.000000000', '2017-02-01T00:00:00.000000000',\n       '2017-03-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-05-01T00:00:00.000000000', '2017-06-01T00:00:00.000000000',\n       '2017-07-01T00:00:00.000000000', '2017-08-01T00:00:00.000000000',\n       '2017-09-01T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2017-11-01T00:00:00.000000000', '2017-12-01T00:00:00.000000000',\n       '2018-01-01T00:00:00.000000000', '2018-02-01T00:00:00.000000000',\n       '2018-03-01T00:00:00.000000000', '2018-04-01T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2018-06-01T00:00:00.000000000',\n       '2018-07-01T00:00:00.000000000', '2018-08-01T00:00:00.000000000',\n       '2018-09-01T00:00:00.000000000', '2018-10-01T00:00:00.000000000',\n       '2018-11-01T00:00:00.000000000', '2018-12-01T00:00:00.000000000',\n       '2019-01-01T00:00:00.000000000', '2019-02-01T00:00:00.000000000',\n       '2019-03-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-05-01T00:00:00.000000000', '2019-06-01T00:00:00.000000000',\n       '2019-07-01T00:00:00.000000000', '2019-08-01T00:00:00.000000000',\n       '2019-09-01T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2019-11-01T00:00:00.000000000', '2019-12-01T00:00:00.000000000',\n       '2020-01-01T00:00:00.000000000', '2020-02-01T00:00:00.000000000',\n       '2020-03-01T00:00:00.000000000', '2020-04-01T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2020-06-01T00:00:00.000000000',\n       '2020-07-01T00:00:00.000000000', '2020-08-01T00:00:00.000000000',\n       '2020-09-01T00:00:00.000000000', '2020-10-01T00:00:00.000000000',\n       '2020-11-01T00:00:00.000000000', '2020-12-01T00:00:00.000000000',\n       '2021-01-01T00:00:00.000000000', '2021-02-01T00:00:00.000000000',\n       '2021-03-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-05-01T00:00:00.000000000', '2021-06-01T00:00:00.000000000',\n       '2021-07-01T00:00:00.000000000', '2021-08-01T00:00:00.000000000',\n       '2021-09-01T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2021-11-01T00:00:00.000000000', '2021-12-01T00:00:00.000000000',\n       '2022-01-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)<U46'OMI_trno2_0.10x0.10_201601_Col3...array(['OMI_trno2_0.10x0.10_201601_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201602_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201603_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201604_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201605_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201606_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201607_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201608_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201609_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201610_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201611_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201612_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201701_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201702_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201703_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201704_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201705_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201706_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201707_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_201708_Col3_V4-no2-monthly',\n...\n       'OMI_trno2_0.10x0.10_202006_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202007_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202008_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202009_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202010_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202011_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202012_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202101_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202102_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202103_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202104_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202105_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202106_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202107_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202108_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202109_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202110_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202111_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202112_Col3_V4-no2-monthly',\n       'OMI_trno2_0.10x0.10_202201_Col3_V4-no2-monthly'], dtype='<U46')band()<U11'cog_default'array('cog_default', dtype='<U11')x(x)float6473.7 73.8 73.9 ... 134.9 135.0axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 73.7,  73.8,  73.9, ..., 134.8, 134.9, 135. ])y(y)float6453.5 53.4 53.3 ... 18.4 18.3 18.2axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([53.5, 53.4, 53.3, ..., 18.4, 18.3, 18.2])proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, 90.0], [-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0]]]},\n      dtype=object)proj:epsg()int644326array(4326)proj:bbox()object{90.0, 180.0, -90.0, -180.0}array({90.0, 180.0, -90.0, -180.0}, dtype=object)proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:transform()object{0.1, 0.0, 1.0, -0.1, -180.0, 90.0}array({0.1, 0.0, 1.0, -0.1, -180.0, 90.0}, dtype=object)epsg()int644326array(4326)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :73.65000000000002 0.09999999999999998 0.0 53.55 0.0 -0.09999999999999999array(0)Attributes: (2)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))resolution :0.1\n\n\n\n# Group data into months\ndates = data_band.groupby('time')\n\n\n# Average over entire spatial bounding box for each month\nmeans = dates.mean(dim=('x', 'y'))\n\n\nmeans.plot()"
  },
  {
    "objectID": "monthly-omi-no2-timeseries-stac-api.html",
    "href": "monthly-omi-no2-timeseries-stac-api.html",
    "title": "veda-documentation",
    "section": "",
    "text": "This notebook demonstrates how to generate a timeseries using STAC API statistics endpoints.\n\nAuthor: Leo Thomas\nLasted Updated Date: May 13, 2022\n\n\nimport concurrent.futures\nimport datetime as dt\nfrom ipyleaflet import basemaps, Map, GeoJSON\nimport json\nimport requests as re\nimport matplotlib.pyplot as plt\nimport pprint\nimport time\n\nSTAC_ENDPOINT_URL = \"https://staging-stac.delta-backend.xyz\"\nRASTER_ENDPOINT_URL = \"https://staging-raster.delta-backend.xyz\"\n\n\n\n\nre.get(f\"{STAC_ENDPOINT_URL}/collections/no2-monthly\").json()\n\n{'id': 'no2-monthly',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly'}],\n 'title': 'NO₂ Monthly',\n 'extent': {'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'temporal': {'interval': [['2016-01-01T00:00:00Z',\n     '2022-01-01T00:00:00Z']]}},\n 'license': 'MIT',\n 'summaries': {'datetime': ['2016-01-01T00:00:00Z', '2022-02-01T00:00:00Z'],\n  'cog_default': {'max': 50064805976866816, 'min': -6618294421291008}},\n 'description': 'Darker colors indicate higher nitrogen dioxide (NO₂) levels and more activity. Lighter colors indicate lower levels of NO₂ and less activity. Missing pixels indicate areas of no data most likely associated with cloud cover or snow.',\n 'item_assets': {'cog_default': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Default COG Layer',\n   'description': 'Cloud optimized default layer to display on map'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': ['https://stac-extensions.github.io/item-assets/v1.0.0/schema.json'],\n 'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month'}\n\n\n\n\n\n\npprint.pprint({\n    k:v for k,v in re.get(f\"{STAC_ENDPOINT_URL}/collections/no2-monthly\").json().items()\n    if k in [\"dashboard:is_periodic\", \"dashboard:time_density\", \"summaries\"]\n})\n\n{'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month',\n 'summaries': {'cog_default': {'max': 50064805976866816,\n                               'min': -6618294421291008},\n               'datetime': ['2016-01-01T00:00:00Z', '2022-02-01T00:00:00Z']}}\n\n\n\n\n\nThis step is just for demonstration, to inspect what an item looks like.\n\nitems = re.get(f\"{STAC_ENDPOINT_URL}/collections/no2-monthly/items?limit=100\").json()[\"features\"]\nitems[0]\n\n{'id': 'OMI_trno2_0.10x0.10_202202_Col3_V4-no2-monthly',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly/items/OMI_trno2_0.10x0.10_202202_Col3_V4-no2-monthly'}],\n 'assets': {'cog_default': {'href': 's3://covid-eo-data/OMNO2d_HRM/OMI_trno2_0.10x0.10_202202_Col3_V4.nc.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'raster:bands': [{'scale': 1.0,\n     'nodata': 'inf',\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 27294749094313984,\n      'min': -2361326311571456.0,\n      'count': 11,\n      'buckets': [405729, 55726, 2526, 676, 253, 70, 9, 5, 6, 2]},\n     'statistics': {'mean': 349305160444321.25,\n      'stddev': 685701028136779.2,\n      'maximum': 27294749094313984,\n      'minimum': -2361326311571456.0,\n      'valid_percent': 88.69209289550781}}]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180.0, 90.0],\n    [-180.0, -90.0],\n    [180.0, -90.0],\n    [180.0, 90.0],\n    [-180.0, 90.0]]]},\n 'collection': 'no2-monthly',\n 'properties': {'datetime': '2022-02-01T00:00:00Z',\n  'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n  'proj:epsg': 4326,\n  'proj:shape': [1800, 3600],\n  'proj:geometry': {'type': 'Polygon',\n   'coordinates': [[[-180.0, 90.0],\n     [-180.0, -90.0],\n     [180.0, -90.0],\n     [180.0, 90.0],\n     [-180.0, 90.0]]]},\n  'proj:transform': [0.1, 0.0, -180.0, 0.0, -0.1, 90.0, 0.0, 0.0, 1.0]},\n 'stac_version': '1.0.0',\n 'stac_extensions': ['https://stac-extensions.github.io/projection/v1.0.0/schema.json',\n  'https://stac-extensions.github.io/raster/v1.1.0/schema.json']}\n\n\n\n\n\nWe’ve defined a bounding box for France in this case.\n\nbounding_box_france = { \n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n            [\n              -5.4534286,\n              41.2632185\n            ],\n            [\n              9.8678344,\n              41.2632185\n            ],\n            [\n              9.8678344,\n              51.268318\n            ],\n            [\n              -5.4534286,\n              51.268318\n            ],\n            [\n              -5.4534286,\n              41.2632185\n            ]\n        ]]\n    }\n}\n\n\n\n\n\nThis step is for visual inspection of the bounding box.\n\nm = Map(\n    basemap=basemaps.OpenStreetMap.Mapnik,\n    center=(47,4),\n    zoom=3\n)\ngeo = GeoJSON(data=bounding_box_france, style={\"color\":\"red\", \"fillOpacity\":0})\nm.add_layer(geo)\nm\n\n\n\n\n\n\n\nFirst, we create a generate_stats function and then we call it with the bounding box defined for France.\n\ndef generate_stats(items, bounding_box):\n    stats = [\n        {\n            **re.post(\n                f\"{RASTER_ENDPOINT_URL}/cog/statistics\", \n                params={\n                    \"url\":item[\"assets\"][\"cog_default\"][\"href\"]\n                },\n                json=bounding_box\n            ).json()[\"properties\"], \n             \"datetime\":item[\"properties\"][\"datetime\"]\n        }\n        for item in items\n    ]\n    return stats\n\n\n\n\nThis may take a minute, depending on the network.\n\nstart = time.time()\nstats = generate_stats(items, bounding_box_france)\nend = time.time()\nprint(f\"Elapsed time for small bounding box (france) {round(end-start,2)} seconds. Items queried: {len(items)}\")\n\nElapsed time for small bounding box (france) 64.05 seconds. Items queried: 74\n\n\n\n\n\n\nstats[0]\n\n{'statistics': {'1': {'min': -1084004715462656.0,\n   'max': 1.0274760067907584e+16,\n   'mean': 1771445372358347.5,\n   'count': 15149.0,\n   'sum': 2.6835625945856606e+19,\n   'std': 1214133036547102.0,\n   'median': 1508695175331840.0,\n   'majority': 4887620706369536.0,\n   'minority': -1084004715462656.0,\n   'unique': 15138.0,\n   'histogram': [[216.0,\n     4901.0,\n     6675.0,\n     1896.0,\n     937.0,\n     323.0,\n     146.0,\n     36.0,\n     14.0,\n     5.0],\n    [-1084004715462656.0,\n     51871762874368.0,\n     1187748241211392.0,\n     2323624719548416.0,\n     3459501197885440.0,\n     4595377676222464.0,\n     5731254154559488.0,\n     6867130632896512.0,\n     8003007111233536.0,\n     9138883589570560.0,\n     1.0274760067907584e+16]],\n   'valid_percent': 99.01,\n   'masked_pixels': 151.0,\n   'valid_pixels': 15149.0,\n   'percentile_2': 138399994011975.67,\n   'percentile_98': 5268545328696521.0}},\n 'datetime': '2022-02-01T00:00:00Z'}\n\n\n\ndates = [dt.datetime.strptime(stat[\"datetime\"], \"%Y-%m-%dT%H:%M:%SZ\") for stat in stats]\nmeans = [stat[\"statistics\"][\"1\"][\"mean\"] for stat in stats]\nstd_devs = [stat[\"statistics\"][\"1\"][\"std\"] for stat in stats]\nupper_bounds = [m+s for (m,s) in zip(means, std_devs)]\nlower_bounds = [m-s for (m,s) in zip(means, std_devs)]\n\n\nplt.plot(dates, means, 'black')\nplt.fill_between(dates, upper_bounds, lower_bounds, facecolor=\"lightgrey\", interpolate=True)\n\n<matplotlib.collections.PolyCollection at 0x1208afb50>"
  },
  {
    "objectID": "list-items.html",
    "href": "list-items.html",
    "title": "veda-documentation",
    "section": "",
    "text": "from satsearch import Search\nfrom pystac import Catalog\n\n\nstac_api_url = 'https://staging-stac.delta-backend.xyz/'\ncatalog = Catalog.from_file(stac_api_url)\n\n\ncollections = []\n\nfor root, subcatalogs, _ in catalog.walk():\n    # subcats represents any catalogs or collections owned by root\n    for cat in subcatalogs:\n        collections.append(cat.id)\n        \ncollections\n\n['social-vulnerability-index-housing-nopop',\n 'nightlights-hd-monthly',\n 'grdi-v1-built',\n 'MO_NPP_npp_vgpm',\n 'HLSS30.002',\n 'HLSL30.002',\n 'OMI_trno2-COG',\n 'no2-monthly-diff',\n 'social-vulnerability-index-household',\n 'social-vulnerability-index-household-nopop',\n 'social-vulnerability-index-minority',\n 'grdi-shdi-raster',\n 'no2-monthly',\n 'facebook_population_density',\n 'grdi-vnl-slope-raster',\n 'grdi-vnl-raster',\n 'social-vulnerability-index-socioeconomic',\n 'social-vulnerability-index-socioeconomic-nopop',\n 'social-vulnerability-index-housing',\n 'blue-tarp-detection',\n 'blue-tarp-planetscope',\n 'grdi-v1-raster',\n 'OMSO2PCA-COG',\n 'social-vulnerability-index-overall-nopop',\n 'grdi-filled-missing-values-count',\n 'social-vulnerability-index-overall',\n 'IS2SITMOGR4',\n 'grdi-cdr-raster',\n 'social-vulnerability-index-minority-nopop',\n 'nceo_africa_2017',\n 'geoglam',\n 'grdi-imr-raster',\n 'nightlights-hd-3bands']\n\n\n\nfirst_item_locations = []\nfor collection in collections:\n    search = Search.search(\n        url=stac_api_url,\n        collections=[collection],\n        limit=1\n    )\n    location = search.items()[0].assets['cog_default']['href']\n    first_item_locations.append(location)\n\n\nfirst_item_locations"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "veda-documentation",
    "section": "",
    "text": "Documentation for the various APIs for the datasets maintained by NASA VEDA project.\nExample notebooks on how to use those APIs and datasets.\nRun the notebooks with"
  }
]