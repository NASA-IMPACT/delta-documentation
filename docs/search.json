[
  {
    "objectID": "list-collections.html",
    "href": "list-collections.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "from pystac import Catalog\n\n\nstac_api_url = 'https://staging-stac.delta-backend.xyz/'\ncatalog = Catalog.from_file(stac_api_url)\n\n\nfor root, subcatalogs, items in catalog.walk():\n    # subcats represents any catalogs or collections owned by root\n    for cat in subcatalogs:\n        print(cat.id)\n\nno2-monthly\nnightlights-hd-1band\ngrdi-cdr-raster\nhls-l30-002-ej-reprocessed\nfacebook_population_density\nhls-l30-002-ej\nblue-tarp-planetscope\nsocial-vulnerability-index-housing\nsocial-vulnerability-index-household-nopop\ngrdi-v1-built\nsocial-vulnerability-index-household\nhls-s30-002-ej-reprocessed\nnightlights-hd-monthly\ngrdi-vnl-slope-raster\ngeoglam\ngrdi-vnl-raster\nsocial-vulnerability-index-housing-nopop\nhls-s30-002-ej\nsocial-vulnerability-index-socioeconomic\nsocial-vulnerability-index-socioeconomic-nopop\ngrdi-filled-missing-values-count\ngrdi-shdi-raster\nblue-tarp-detection\nMO_NPP_npp_vgpm\ngrdi-imr-raster\nsocial-vulnerability-index-overall-nopop\nsocial-vulnerability-index-overall\ngrdi-v1-raster\nIS2SITMOGR4-cog\nsocial-vulnerability-index-minority\nnceo_africa_2017\nOMSO2PCA-COG\nHLSS30.002\nHLSL30.002\nnightlights-500m-daily\nOMI_trno2-COG\nno2-monthly-diff\nsocial-vulnerability-index-minority-nopop"
  },
  {
    "objectID": "veda-apis.html",
    "href": "veda-apis.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "The VEDA API source code is currently stored in a private repository: delta-backend but is based off eoAPI\n\n\n\n\n\n\n\n\nSTAC browser (experimental): delta-staging-stac-browser\nSTAC API (metadata): https://staging-stac.delta-backend.xyz/docs\nList collections: https://staging-stac.delta-backend.xyz/collections\nRaster API (tiling): https://staging-raster.delta-backend.xyz/docs\nSTAC viewer (experimental): https://staging-stac.delta-backend.xyz/index.html\n\n\n\n\n\nSTAC browser (experimental): delta-dev-stac-browser\nSTAC API (metadata): https://dev-stac.delta-backend.xyz/docs\nList collections: https://dev-stac.delta-backend.xyz/collections\nRaster API (tiling): https://dev-raster.delta-backend.xyz/docs\nSTAC viewer (experimental): https://dev-stac.delta-backend.xyz/index.html"
  },
  {
    "objectID": "open-and-plot.html",
    "href": "open-and-plot.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "This notebook demonstrates how to open the plot data using rioxarray, stackstac and satsarch.\n\nAuthor: Aimee Barciauskas\nLasted Updated Date: June 28, 2022\n\n\nimport rioxarray\nimport stackstac\nfrom satsearch import Search\nimport rasterio as rio\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "open-and-plot.html#use-satsearch-to-discover-items-in-the-social-vulnerability-index-socioeconomic-nopop-collection",
    "href": "open-and-plot.html#use-satsearch-to-discover-items-in-the-social-vulnerability-index-socioeconomic-nopop-collection",
    "title": "VEDA Documentation",
    "section": "Use satsearch to discover items in the social-vulnerability-index-socioeconomic-nopop collection",
    "text": "Use satsearch to discover items in the social-vulnerability-index-socioeconomic-nopop collection\n\nsearch = Search.search(\n    url=STAC_API_URL,\n    collections=[collection],\n    limit=10\n)\nitems = search.items()\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 10, 'collections': ['social-vulnerability-index-overall-nopop']}\n\n\n\nlen(items)\n\n5"
  },
  {
    "objectID": "open-and-plot.html#create-an-xarray.dataarray",
    "href": "open-and-plot.html#create-an-xarray.dataarray",
    "title": "VEDA Documentation",
    "section": "Create an xarray.DataArray",
    "text": "Create an xarray.DataArray\n\ns3_link = items[0].assets['cog_default']['href']\nda = rioxarray.open_rasterio(s3_link)\nda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (band: 1, y: 6297, x: 13353)>\n[84083841 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -178.2 -178.2 -178.2 ... -66.98 -66.97 -66.96\n  * y            (y) float64 71.38 71.37 71.36 71.35 ... 18.94 18.93 18.92 18.91\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    -3.3999999521443642e+38\n    scale_factor:  1.0\n    add_offset:    0.0xarray.DataArrayband: 1y: 6297x: 13353...[84083841 values with dtype=float32]Coordinates: (4)band(band)int641array([1])x(x)float64-178.2 -178.2 ... -66.97 -66.96array([-178.229167, -178.220833, -178.2125  , ...,  -66.979167,  -66.970834,\n        -66.9625  ])y(y)float6471.38 71.37 71.36 ... 18.92 18.91array([71.379166, 71.370833, 71.362499, ..., 18.929166, 18.920833, 18.9125  ])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-178.23333334 0.00833333330000749 0.0 71.383332688 0.0 -0.00833333329998412array(0)Attributes: (3)_FillValue :-3.3999999521443642e+38scale_factor :1.0add_offset :0.0\n\n\n\nda = da.squeeze('band', drop=True)\nda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (y: 6297, x: 13353)>\n[84083841 values with dtype=float32]\nCoordinates:\n  * x            (x) float64 -178.2 -178.2 -178.2 ... -66.98 -66.97 -66.96\n  * y            (y) float64 71.38 71.37 71.36 71.35 ... 18.94 18.93 18.92 18.91\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    -3.3999999521443642e+38\n    scale_factor:  1.0\n    add_offset:    0.0xarray.DataArrayy: 6297x: 13353...[84083841 values with dtype=float32]Coordinates: (3)x(x)float64-178.2 -178.2 ... -66.97 -66.96array([-178.229167, -178.220833, -178.2125  , ...,  -66.979167,  -66.970834,\n        -66.9625  ])y(y)float6471.38 71.37 71.36 ... 18.92 18.91array([71.379166, 71.370833, 71.362499, ..., 18.929166, 18.920833, 18.9125  ])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-178.23333334 0.00833333330000749 0.0 71.383332688 0.0 -0.00833333329998412array(0)Attributes: (3)_FillValue :-3.3999999521443642e+38scale_factor :1.0add_offset :0.0\n\n\n\nplt.figure(figsize=[15, 8])\nda.plot(x='x', y='y', vmin=0, vmax=1)\n\n<matplotlib.collections.QuadMesh at 0x1979f7a00>\n\n\n/Users/aimeebarciauskas/miniconda3/lib/python3.9/site-packages/matplotlib/colors.py:621: RuntimeWarning: overflow encountered in multiply\n  xa *= self.N"
  },
  {
    "objectID": "tools.html",
    "href": "tools.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "The example notebooks use these tools:\n\nfolium: folium adds Leaflet.js support to python projects for visualizing data in a map.\npystac: PySTAC is a library for working with SpatioTemporal Asset Catalogs (STAC) in Python 3.\nrioxarray: rasterio xarray extension\nsat-search: Sat-search is a Python 3 library and a command line tool for discovering and downloading publicly available satellite imagery using STAC compliant API.\nstackstac: stackstac.stack turns a STAC collection into a lazy xarray.DataArray, backed by dask."
  },
  {
    "objectID": "notebooks.html",
    "href": "notebooks.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "Run the notebooks locally via:\npip3 install -r requirements\njupyter notebook"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "This website provides documentation and example notebooks for the various APIs for the datasets maintained by NASA VEDA project.\nYou can run the notebooks locally with:\npip3 install -r requirements\njupyter notebook"
  },
  {
    "objectID": "timeseries-rioxarray-stackstac.html",
    "href": "timeseries-rioxarray-stackstac.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "This notebook demonstrates how to generate a timeseries via rioxarray, satsarch and stackstac.\n\nAuthor: Aimee Barciauskas\nLasted Updated Date: June 29, 2022\n\n\nimport rioxarray\nimport stackstac\nfrom satsearch import Search"
  },
  {
    "objectID": "timeseries-rioxarray-stackstac.html#use-satsearch-to-discover-items-in-the-no2-monthly-collection-for-china",
    "href": "timeseries-rioxarray-stackstac.html#use-satsearch-to-discover-items-in-the-no2-monthly-collection-for-china",
    "title": "VEDA Documentation",
    "section": "Use satsearch to discover items in the no2-monthly collection for China",
    "text": "Use satsearch to discover items in the no2-monthly collection for China\n\nchina_bbox = [\n    73.675,\n    18.198,\n    135.026,\n    53.459\n]\ndatetime = \"2000-01-01T00:00:00Z/2022-01-02T00:00:00Z\"\n\nsearch = Search.search(\n    url=STAC_API_URL,\n    bbox=china_bbox,\n    datetime=datetime,\n    collections=[collection],\n    limit=1000\n)\nitems = search.items()\n\nurl is https://staging-stac.delta-backend.xyz/search\nheaders is None\nkwargs is {'limit': 1000, 'bbox': [73.675, 18.198, 135.026, 53.459], 'datetime': '2000-01-01T00:00:00Z/2022-01-02T00:00:00Z', 'collections': ['no2-monthly']}\n\n\n\nlen(items)\n\n73"
  },
  {
    "objectID": "timeseries-rioxarray-stackstac.html#create-an-xarray.dataarray-using-stackstac",
    "href": "timeseries-rioxarray-stackstac.html#create-an-xarray.dataarray-using-stackstac",
    "title": "VEDA Documentation",
    "section": "Create an xarray.DataArray using stackstac",
    "text": "Create an xarray.DataArray using stackstac\n\nstack = stackstac.stack(items)\nstack = stack.assign_coords({\"time\": stack.start_datetime})\nstack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-a7c720c3d061577c170310bd578d5678' (time: 73,\n                                                                band: 1,\n                                                                y: 1800, x: 3600)>\ndask.array<fetch_raster_window, shape=(73, 1, 1800, 3600), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray>\nCoordinates: (12/13)\n  * time            (time) <U20 '2022-01-01T00:00:00Z' ... '2016-01-01T00:00:...\n    id              (time) <U45 'OMI_trno2_monthly_0.10x0.10_202201_Col3_V4.n...\n  * band            (band) <U11 'cog_default'\n  * x               (x) float64 -180.0 -179.9 -179.8 ... 179.7 179.8 179.9\n  * y               (y) float64 90.0 89.9 89.8 89.7 ... -89.6 -89.7 -89.8 -89.9\n    end_datetime    (time) <U20 '2022-01-31T00:00:00Z' ... '2016-01-31T00:00:...\n    ...              ...\n    proj:transform  object {0.1, 0.0, -0.1, 1.0, -180.0, 90.0}\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, -90....\n    start_datetime  (time) <U20 '2022-01-01T00:00:00Z' ... '2016-01-01T00:00:...\n    proj:shape      object {1800, 3600}\n    proj:bbox       object {180.0, -180.0, 90.0, -90.0}\n    epsg            int64 4326\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    crs:         epsg:4326\n    transform:   | 0.10, 0.00,-180.00|\\n| 0.00,-0.10, 90.00|\\n| 0.00, 0.00, 1...\n    resolution:  0.1xarray.DataArray'stackstac-a7c720c3d061577c170310bd578d5678'time: 73band: 1y: 1800x: 3600dask.array<chunksize=(1, 1, 1024, 1024), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         3.52 GiB \n                         8.00 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 1, 1800, 3600) \n                         (1, 1, 1024, 1024) \n                    \n                    \n                         Count \n                         738 Tasks \n                         584 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  73\n  1\n\n\n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  3600\n  1800\n  1\n\n        \n    \nCoordinates: (13)time(time)<U20'2022-01-01T00:00:00Z' ... '2016...array(['2022-01-01T00:00:00Z', '2021-12-01T00:00:00Z', '2021-11-01T00:00:00Z',\n       '2021-10-01T00:00:00Z', '2021-09-01T00:00:00Z', '2021-08-01T00:00:00Z',\n       '2021-07-01T00:00:00Z', '2021-06-01T00:00:00Z', '2021-05-01T00:00:00Z',\n       '2021-04-01T00:00:00Z', '2021-03-01T00:00:00Z', '2021-02-01T00:00:00Z',\n       '2021-01-01T00:00:00Z', '2020-12-01T00:00:00Z', '2020-11-01T00:00:00Z',\n       '2020-10-01T00:00:00Z', '2020-09-01T00:00:00Z', '2020-08-01T00:00:00Z',\n       '2020-07-01T00:00:00Z', '2020-06-01T00:00:00Z', '2020-05-01T00:00:00Z',\n       '2020-04-01T00:00:00Z', '2020-03-01T00:00:00Z', '2020-02-01T00:00:00Z',\n       '2020-01-01T00:00:00Z', '2019-12-01T00:00:00Z', '2019-11-01T00:00:00Z',\n       '2019-10-01T00:00:00Z', '2019-09-01T00:00:00Z', '2019-08-01T00:00:00Z',\n       '2019-07-01T00:00:00Z', '2019-06-01T00:00:00Z', '2019-05-01T00:00:00Z',\n       '2019-04-01T00:00:00Z', '2019-03-01T00:00:00Z', '2019-02-01T00:00:00Z',\n       '2019-01-01T00:00:00Z', '2018-12-01T00:00:00Z', '2018-11-01T00:00:00Z',\n       '2018-10-01T00:00:00Z', '2018-09-01T00:00:00Z', '2018-08-01T00:00:00Z',\n       '2018-07-01T00:00:00Z', '2018-06-01T00:00:00Z', '2018-05-01T00:00:00Z',\n       '2018-04-01T00:00:00Z', '2018-03-01T00:00:00Z', '2018-02-01T00:00:00Z',\n       '2018-01-01T00:00:00Z', '2017-12-01T00:00:00Z', '2017-11-01T00:00:00Z',\n       '2017-10-01T00:00:00Z', '2017-09-01T00:00:00Z', '2017-08-01T00:00:00Z',\n       '2017-07-01T00:00:00Z', '2017-06-01T00:00:00Z', '2017-05-01T00:00:00Z',\n       '2017-04-01T00:00:00Z', '2017-03-01T00:00:00Z', '2017-02-01T00:00:00Z',\n       '2017-01-01T00:00:00Z', '2016-12-01T00:00:00Z', '2016-11-01T00:00:00Z',\n       '2016-10-01T00:00:00Z', '2016-09-01T00:00:00Z', '2016-08-01T00:00:00Z',\n       '2016-07-01T00:00:00Z', '2016-06-01T00:00:00Z', '2016-05-01T00:00:00Z',\n       '2016-04-01T00:00:00Z', '2016-03-01T00:00:00Z', '2016-02-01T00:00:00Z',\n       '2016-01-01T00:00:00Z'], dtype='<U20')id(time)<U45'OMI_trno2_monthly_0.10x0.10_202...array(['OMI_trno2_monthly_0.10x0.10_202201_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202112_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202111_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202110_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202109_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202108_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202107_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202106_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202105_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202104_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202103_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202102_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202101_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202012_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202011_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202010_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202009_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202008_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202007_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202006_Col3_V4.nc',\n...\n       'OMI_trno2_monthly_0.10x0.10_201708_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201707_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201706_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201705_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201704_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201703_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201702_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201701_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201612_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201611_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201610_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201609_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201608_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201607_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201606_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201605_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201604_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201603_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201602_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201601_Col3_V4.nc'], dtype='<U45')band(band)<U11'cog_default'array(['cog_default'], dtype='<U11')x(x)float64-180.0 -179.9 ... 179.8 179.9array([-180. , -179.9, -179.8, ...,  179.7,  179.8,  179.9])y(y)float6490.0 89.9 89.8 ... -89.8 -89.9array([ 90. ,  89.9,  89.8, ..., -89.7, -89.8, -89.9])end_datetime(time)<U20'2022-01-31T00:00:00Z' ... '2016...array(['2022-01-31T00:00:00Z', '2021-12-31T00:00:00Z',\n       '2021-11-30T00:00:00Z', '2021-10-31T00:00:00Z',\n       '2021-09-30T00:00:00Z', '2021-08-31T00:00:00Z',\n       '2021-07-31T00:00:00Z', '2021-06-30T00:00:00Z',\n       '2021-05-31T00:00:00Z', '2021-04-30T00:00:00Z',\n       '2021-03-31T00:00:00Z', '2021-02-28T00:00:00Z',\n       '2021-01-31T00:00:00Z', '2020-12-31T00:00:00Z',\n       '2020-11-30T00:00:00Z', '2020-10-31T00:00:00Z',\n       '2020-09-30T00:00:00Z', '2020-08-31T00:00:00Z',\n       '2020-07-31T00:00:00Z', '2020-06-30T00:00:00Z',\n       '2020-05-31T00:00:00Z', '2020-04-30T00:00:00Z',\n       '2020-03-31T00:00:00Z', '2020-02-29T00:00:00Z',\n       '2020-01-31T00:00:00Z', '2019-12-31T00:00:00Z',\n       '2019-11-30T00:00:00Z', '2019-10-31T00:00:00Z',\n       '2019-09-30T00:00:00Z', '2019-08-31T00:00:00Z',\n       '2019-07-31T00:00:00Z', '2019-06-30T00:00:00Z',\n       '2019-05-31T00:00:00Z', '2019-04-30T00:00:00Z',\n       '2019-03-31T00:00:00Z', '2019-02-28T00:00:00Z',\n       '2019-01-31T00:00:00Z', '2018-12-31T00:00:00Z',\n       '2018-11-30T00:00:00Z', '2018-10-31T00:00:00Z',\n       '2018-09-30T00:00:00Z', '2018-08-31T00:00:00Z',\n       '2018-07-31T00:00:00Z', '2018-06-30T00:00:00Z',\n       '2018-05-31T00:00:00Z', '2018-04-30T00:00:00Z',\n       '2018-03-31T00:00:00Z', '2018-02-28T00:00:00Z',\n       '2018-01-31T00:00:00Z', '2017-12-31T00:00:00Z',\n       '2017-11-30T00:00:00Z', '2017-10-31T00:00:00Z',\n       '2017-09-30T00:00:00Z', '2017-08-31T00:00:00Z',\n       '2017-07-31T00:00:00Z', '2017-06-30T00:00:00Z',\n       '2017-05-31T00:00:00Z', '2017-04-30T00:00:00Z',\n       '2017-03-31T00:00:00Z', '2017-02-28T00:00:00Z',\n       '2017-01-31T00:00:00Z', '2016-12-31T00:00:00Z',\n       '2016-11-30T00:00:00Z', '2016-10-31T00:00:00Z',\n       '2016-09-30T00:00:00Z', '2016-08-31T00:00:00Z',\n       '2016-07-31T00:00:00Z', '2016-06-30T00:00:00Z',\n       '2016-05-31T00:00:00Z', '2016-04-30T00:00:00Z',\n       '2016-03-31T00:00:00Z', '2016-02-29T00:00:00Z',\n       '2016-01-31T00:00:00Z'], dtype='<U20')proj:epsg()int644326array(4326)proj:transform()object{0.1, 0.0, -0.1, 1.0, -180.0, 90.0}array({0.1, 0.0, -0.1, 1.0, -180.0, 90.0}, dtype=object)proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0], [-180.0, -90.0]]]},\n      dtype=object)start_datetime(time)<U20'2022-01-01T00:00:00Z' ... '2016...array(['2022-01-01T00:00:00Z', '2021-12-01T00:00:00Z',\n       '2021-11-01T00:00:00Z', '2021-10-01T00:00:00Z',\n       '2021-09-01T00:00:00Z', '2021-08-01T00:00:00Z',\n       '2021-07-01T00:00:00Z', '2021-06-01T00:00:00Z',\n       '2021-05-01T00:00:00Z', '2021-04-01T00:00:00Z',\n       '2021-03-01T00:00:00Z', '2021-02-01T00:00:00Z',\n       '2021-01-01T00:00:00Z', '2020-12-01T00:00:00Z',\n       '2020-11-01T00:00:00Z', '2020-10-01T00:00:00Z',\n       '2020-09-01T00:00:00Z', '2020-08-01T00:00:00Z',\n       '2020-07-01T00:00:00Z', '2020-06-01T00:00:00Z',\n       '2020-05-01T00:00:00Z', '2020-04-01T00:00:00Z',\n       '2020-03-01T00:00:00Z', '2020-02-01T00:00:00Z',\n       '2020-01-01T00:00:00Z', '2019-12-01T00:00:00Z',\n       '2019-11-01T00:00:00Z', '2019-10-01T00:00:00Z',\n       '2019-09-01T00:00:00Z', '2019-08-01T00:00:00Z',\n       '2019-07-01T00:00:00Z', '2019-06-01T00:00:00Z',\n       '2019-05-01T00:00:00Z', '2019-04-01T00:00:00Z',\n       '2019-03-01T00:00:00Z', '2019-02-01T00:00:00Z',\n       '2019-01-01T00:00:00Z', '2018-12-01T00:00:00Z',\n       '2018-11-01T00:00:00Z', '2018-10-01T00:00:00Z',\n       '2018-09-01T00:00:00Z', '2018-08-01T00:00:00Z',\n       '2018-07-01T00:00:00Z', '2018-06-01T00:00:00Z',\n       '2018-05-01T00:00:00Z', '2018-04-01T00:00:00Z',\n       '2018-03-01T00:00:00Z', '2018-02-01T00:00:00Z',\n       '2018-01-01T00:00:00Z', '2017-12-01T00:00:00Z',\n       '2017-11-01T00:00:00Z', '2017-10-01T00:00:00Z',\n       '2017-09-01T00:00:00Z', '2017-08-01T00:00:00Z',\n       '2017-07-01T00:00:00Z', '2017-06-01T00:00:00Z',\n       '2017-05-01T00:00:00Z', '2017-04-01T00:00:00Z',\n       '2017-03-01T00:00:00Z', '2017-02-01T00:00:00Z',\n       '2017-01-01T00:00:00Z', '2016-12-01T00:00:00Z',\n       '2016-11-01T00:00:00Z', '2016-10-01T00:00:00Z',\n       '2016-09-01T00:00:00Z', '2016-08-01T00:00:00Z',\n       '2016-07-01T00:00:00Z', '2016-06-01T00:00:00Z',\n       '2016-05-01T00:00:00Z', '2016-04-01T00:00:00Z',\n       '2016-03-01T00:00:00Z', '2016-02-01T00:00:00Z',\n       '2016-01-01T00:00:00Z'], dtype='<U20')proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:bbox()object{180.0, -180.0, 90.0, -90.0}array({180.0, -180.0, 90.0, -90.0}, dtype=object)epsg()int644326array(4326)Attributes: (4)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))crs :epsg:4326transform :| 0.10, 0.00,-180.00|\n| 0.00,-0.10, 90.00|\n| 0.00, 0.00, 1.00|resolution :0.1"
  },
  {
    "objectID": "timeseries-rioxarray-stackstac.html#clip-the-data-to-the-bounding-box-for-china",
    "href": "timeseries-rioxarray-stackstac.html#clip-the-data-to-the-bounding-box-for-china",
    "title": "VEDA Documentation",
    "section": "Clip the data to the bounding box for China",
    "text": "Clip the data to the bounding box for China\n\n# Subset to Bounding Box for China\nsubset = stack.rio.clip_box(\n    minx=china_bbox[0],\n    miny=china_bbox[1],\n    maxx=china_bbox[2],\n    maxy=china_bbox[3]\n)\nsubset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-a7c720c3d061577c170310bd578d5678' (time: 73,\n                                                                band: 1,\n                                                                y: 354, x: 614)>\ndask.array<getitem, shape=(73, 1, 354, 614), dtype=float64, chunksize=(1, 1, 354, 535), chunktype=numpy.ndarray>\nCoordinates: (12/14)\n  * time            (time) <U20 '2022-01-01T00:00:00Z' ... '2016-01-01T00:00:...\n    id              (time) <U45 'OMI_trno2_monthly_0.10x0.10_202201_Col3_V4.n...\n  * band            (band) <U11 'cog_default'\n  * x               (x) float64 73.7 73.8 73.9 74.0 ... 134.7 134.8 134.9 135.0\n  * y               (y) float64 53.5 53.4 53.3 53.2 53.1 ... 18.5 18.4 18.3 18.2\n    end_datetime    (time) <U20 '2022-01-31T00:00:00Z' ... '2016-01-31T00:00:...\n    ...              ...\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, -90....\n    start_datetime  (time) <U20 '2022-01-01T00:00:00Z' ... '2016-01-01T00:00:...\n    proj:shape      object {1800, 3600}\n    proj:bbox       object {90.0, 180.0, -90.0, -180.0}\n    epsg            int64 4326\n    spatial_ref     int64 0\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    resolution:  0.1xarray.DataArray'stackstac-a7c720c3d061577c170310bd578d5678'time: 73band: 1y: 354x: 614dask.array<chunksize=(1, 1, 354, 535), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         121.06 MiB \n                         1.44 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 1, 354, 614) \n                         (1, 1, 354, 535) \n                    \n                    \n                         Count \n                         884 Tasks \n                         146 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  73\n  1\n\n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  614\n  354\n  1\n\n        \n    \nCoordinates: (14)time(time)<U20'2022-01-01T00:00:00Z' ... '2016...array(['2022-01-01T00:00:00Z', '2021-12-01T00:00:00Z', '2021-11-01T00:00:00Z',\n       '2021-10-01T00:00:00Z', '2021-09-01T00:00:00Z', '2021-08-01T00:00:00Z',\n       '2021-07-01T00:00:00Z', '2021-06-01T00:00:00Z', '2021-05-01T00:00:00Z',\n       '2021-04-01T00:00:00Z', '2021-03-01T00:00:00Z', '2021-02-01T00:00:00Z',\n       '2021-01-01T00:00:00Z', '2020-12-01T00:00:00Z', '2020-11-01T00:00:00Z',\n       '2020-10-01T00:00:00Z', '2020-09-01T00:00:00Z', '2020-08-01T00:00:00Z',\n       '2020-07-01T00:00:00Z', '2020-06-01T00:00:00Z', '2020-05-01T00:00:00Z',\n       '2020-04-01T00:00:00Z', '2020-03-01T00:00:00Z', '2020-02-01T00:00:00Z',\n       '2020-01-01T00:00:00Z', '2019-12-01T00:00:00Z', '2019-11-01T00:00:00Z',\n       '2019-10-01T00:00:00Z', '2019-09-01T00:00:00Z', '2019-08-01T00:00:00Z',\n       '2019-07-01T00:00:00Z', '2019-06-01T00:00:00Z', '2019-05-01T00:00:00Z',\n       '2019-04-01T00:00:00Z', '2019-03-01T00:00:00Z', '2019-02-01T00:00:00Z',\n       '2019-01-01T00:00:00Z', '2018-12-01T00:00:00Z', '2018-11-01T00:00:00Z',\n       '2018-10-01T00:00:00Z', '2018-09-01T00:00:00Z', '2018-08-01T00:00:00Z',\n       '2018-07-01T00:00:00Z', '2018-06-01T00:00:00Z', '2018-05-01T00:00:00Z',\n       '2018-04-01T00:00:00Z', '2018-03-01T00:00:00Z', '2018-02-01T00:00:00Z',\n       '2018-01-01T00:00:00Z', '2017-12-01T00:00:00Z', '2017-11-01T00:00:00Z',\n       '2017-10-01T00:00:00Z', '2017-09-01T00:00:00Z', '2017-08-01T00:00:00Z',\n       '2017-07-01T00:00:00Z', '2017-06-01T00:00:00Z', '2017-05-01T00:00:00Z',\n       '2017-04-01T00:00:00Z', '2017-03-01T00:00:00Z', '2017-02-01T00:00:00Z',\n       '2017-01-01T00:00:00Z', '2016-12-01T00:00:00Z', '2016-11-01T00:00:00Z',\n       '2016-10-01T00:00:00Z', '2016-09-01T00:00:00Z', '2016-08-01T00:00:00Z',\n       '2016-07-01T00:00:00Z', '2016-06-01T00:00:00Z', '2016-05-01T00:00:00Z',\n       '2016-04-01T00:00:00Z', '2016-03-01T00:00:00Z', '2016-02-01T00:00:00Z',\n       '2016-01-01T00:00:00Z'], dtype='<U20')id(time)<U45'OMI_trno2_monthly_0.10x0.10_202...array(['OMI_trno2_monthly_0.10x0.10_202201_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202112_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202111_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202110_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202109_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202108_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202107_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202106_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202105_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202104_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202103_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202102_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202101_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202012_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202011_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202010_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202009_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202008_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202007_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202006_Col3_V4.nc',\n...\n       'OMI_trno2_monthly_0.10x0.10_201708_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201707_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201706_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201705_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201704_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201703_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201702_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201701_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201612_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201611_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201610_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201609_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201608_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201607_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201606_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201605_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201604_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201603_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201602_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201601_Col3_V4.nc'], dtype='<U45')band(band)<U11'cog_default'array(['cog_default'], dtype='<U11')x(x)float6473.7 73.8 73.9 ... 134.9 135.0axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 73.7,  73.8,  73.9, ..., 134.8, 134.9, 135. ])y(y)float6453.5 53.4 53.3 ... 18.4 18.3 18.2axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([53.5, 53.4, 53.3, ..., 18.4, 18.3, 18.2])end_datetime(time)<U20'2022-01-31T00:00:00Z' ... '2016...array(['2022-01-31T00:00:00Z', '2021-12-31T00:00:00Z',\n       '2021-11-30T00:00:00Z', '2021-10-31T00:00:00Z',\n       '2021-09-30T00:00:00Z', '2021-08-31T00:00:00Z',\n       '2021-07-31T00:00:00Z', '2021-06-30T00:00:00Z',\n       '2021-05-31T00:00:00Z', '2021-04-30T00:00:00Z',\n       '2021-03-31T00:00:00Z', '2021-02-28T00:00:00Z',\n       '2021-01-31T00:00:00Z', '2020-12-31T00:00:00Z',\n       '2020-11-30T00:00:00Z', '2020-10-31T00:00:00Z',\n       '2020-09-30T00:00:00Z', '2020-08-31T00:00:00Z',\n       '2020-07-31T00:00:00Z', '2020-06-30T00:00:00Z',\n       '2020-05-31T00:00:00Z', '2020-04-30T00:00:00Z',\n       '2020-03-31T00:00:00Z', '2020-02-29T00:00:00Z',\n       '2020-01-31T00:00:00Z', '2019-12-31T00:00:00Z',\n       '2019-11-30T00:00:00Z', '2019-10-31T00:00:00Z',\n       '2019-09-30T00:00:00Z', '2019-08-31T00:00:00Z',\n       '2019-07-31T00:00:00Z', '2019-06-30T00:00:00Z',\n       '2019-05-31T00:00:00Z', '2019-04-30T00:00:00Z',\n       '2019-03-31T00:00:00Z', '2019-02-28T00:00:00Z',\n       '2019-01-31T00:00:00Z', '2018-12-31T00:00:00Z',\n       '2018-11-30T00:00:00Z', '2018-10-31T00:00:00Z',\n       '2018-09-30T00:00:00Z', '2018-08-31T00:00:00Z',\n       '2018-07-31T00:00:00Z', '2018-06-30T00:00:00Z',\n       '2018-05-31T00:00:00Z', '2018-04-30T00:00:00Z',\n       '2018-03-31T00:00:00Z', '2018-02-28T00:00:00Z',\n       '2018-01-31T00:00:00Z', '2017-12-31T00:00:00Z',\n       '2017-11-30T00:00:00Z', '2017-10-31T00:00:00Z',\n       '2017-09-30T00:00:00Z', '2017-08-31T00:00:00Z',\n       '2017-07-31T00:00:00Z', '2017-06-30T00:00:00Z',\n       '2017-05-31T00:00:00Z', '2017-04-30T00:00:00Z',\n       '2017-03-31T00:00:00Z', '2017-02-28T00:00:00Z',\n       '2017-01-31T00:00:00Z', '2016-12-31T00:00:00Z',\n       '2016-11-30T00:00:00Z', '2016-10-31T00:00:00Z',\n       '2016-09-30T00:00:00Z', '2016-08-31T00:00:00Z',\n       '2016-07-31T00:00:00Z', '2016-06-30T00:00:00Z',\n       '2016-05-31T00:00:00Z', '2016-04-30T00:00:00Z',\n       '2016-03-31T00:00:00Z', '2016-02-29T00:00:00Z',\n       '2016-01-31T00:00:00Z'], dtype='<U20')proj:epsg()int644326array(4326)proj:transform()object{0.1, 0.0, 1.0, -0.1, -180.0, 90.0}array({0.1, 0.0, 1.0, -0.1, -180.0, 90.0}, dtype=object)proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0], [-180.0, -90.0]]]},\n      dtype=object)start_datetime(time)<U20'2022-01-01T00:00:00Z' ... '2016...array(['2022-01-01T00:00:00Z', '2021-12-01T00:00:00Z',\n       '2021-11-01T00:00:00Z', '2021-10-01T00:00:00Z',\n       '2021-09-01T00:00:00Z', '2021-08-01T00:00:00Z',\n       '2021-07-01T00:00:00Z', '2021-06-01T00:00:00Z',\n       '2021-05-01T00:00:00Z', '2021-04-01T00:00:00Z',\n       '2021-03-01T00:00:00Z', '2021-02-01T00:00:00Z',\n       '2021-01-01T00:00:00Z', '2020-12-01T00:00:00Z',\n       '2020-11-01T00:00:00Z', '2020-10-01T00:00:00Z',\n       '2020-09-01T00:00:00Z', '2020-08-01T00:00:00Z',\n       '2020-07-01T00:00:00Z', '2020-06-01T00:00:00Z',\n       '2020-05-01T00:00:00Z', '2020-04-01T00:00:00Z',\n       '2020-03-01T00:00:00Z', '2020-02-01T00:00:00Z',\n       '2020-01-01T00:00:00Z', '2019-12-01T00:00:00Z',\n       '2019-11-01T00:00:00Z', '2019-10-01T00:00:00Z',\n       '2019-09-01T00:00:00Z', '2019-08-01T00:00:00Z',\n       '2019-07-01T00:00:00Z', '2019-06-01T00:00:00Z',\n       '2019-05-01T00:00:00Z', '2019-04-01T00:00:00Z',\n       '2019-03-01T00:00:00Z', '2019-02-01T00:00:00Z',\n       '2019-01-01T00:00:00Z', '2018-12-01T00:00:00Z',\n       '2018-11-01T00:00:00Z', '2018-10-01T00:00:00Z',\n       '2018-09-01T00:00:00Z', '2018-08-01T00:00:00Z',\n       '2018-07-01T00:00:00Z', '2018-06-01T00:00:00Z',\n       '2018-05-01T00:00:00Z', '2018-04-01T00:00:00Z',\n       '2018-03-01T00:00:00Z', '2018-02-01T00:00:00Z',\n       '2018-01-01T00:00:00Z', '2017-12-01T00:00:00Z',\n       '2017-11-01T00:00:00Z', '2017-10-01T00:00:00Z',\n       '2017-09-01T00:00:00Z', '2017-08-01T00:00:00Z',\n       '2017-07-01T00:00:00Z', '2017-06-01T00:00:00Z',\n       '2017-05-01T00:00:00Z', '2017-04-01T00:00:00Z',\n       '2017-03-01T00:00:00Z', '2017-02-01T00:00:00Z',\n       '2017-01-01T00:00:00Z', '2016-12-01T00:00:00Z',\n       '2016-11-01T00:00:00Z', '2016-10-01T00:00:00Z',\n       '2016-09-01T00:00:00Z', '2016-08-01T00:00:00Z',\n       '2016-07-01T00:00:00Z', '2016-06-01T00:00:00Z',\n       '2016-05-01T00:00:00Z', '2016-04-01T00:00:00Z',\n       '2016-03-01T00:00:00Z', '2016-02-01T00:00:00Z',\n       '2016-01-01T00:00:00Z'], dtype='<U20')proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:bbox()object{90.0, 180.0, -90.0, -180.0}array({90.0, 180.0, -90.0, -180.0}, dtype=object)epsg()int644326array(4326)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :73.65000000000002 0.09999999999999998 0.0 53.55 0.0 -0.09999999999999999array(0)Attributes: (2)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))resolution :0.1"
  },
  {
    "objectID": "timeseries-rioxarray-stackstac.html#select-a-band-of-data",
    "href": "timeseries-rioxarray-stackstac.html#select-a-band-of-data",
    "title": "VEDA Documentation",
    "section": "Select a band of data",
    "text": "Select a band of data\nThere is just one band in this case, cog_default.\n\n# select the band default\ndata_band = subset.sel(band='cog_default')\ndata_band\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-a7c720c3d061577c170310bd578d5678' (time: 73,\n                                                                y: 354, x: 614)>\ndask.array<getitem, shape=(73, 354, 614), dtype=float64, chunksize=(1, 354, 535), chunktype=numpy.ndarray>\nCoordinates: (12/14)\n  * time            (time) <U20 '2022-01-01T00:00:00Z' ... '2016-01-01T00:00:...\n    id              (time) <U45 'OMI_trno2_monthly_0.10x0.10_202201_Col3_V4.n...\n    band            <U11 'cog_default'\n  * x               (x) float64 73.7 73.8 73.9 74.0 ... 134.7 134.8 134.9 135.0\n  * y               (y) float64 53.5 53.4 53.3 53.2 53.1 ... 18.5 18.4 18.3 18.2\n    end_datetime    (time) <U20 '2022-01-31T00:00:00Z' ... '2016-01-31T00:00:...\n    ...              ...\n    proj:geometry   object {'type': 'Polygon', 'coordinates': [[[-180.0, -90....\n    start_datetime  (time) <U20 '2022-01-01T00:00:00Z' ... '2016-01-01T00:00:...\n    proj:shape      object {1800, 3600}\n    proj:bbox       object {90.0, 180.0, -90.0, -180.0}\n    epsg            int64 4326\n    spatial_ref     int64 0\nAttributes:\n    spec:        RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), r...\n    resolution:  0.1xarray.DataArray'stackstac-a7c720c3d061577c170310bd578d5678'time: 73y: 354x: 614dask.array<chunksize=(1, 354, 535), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         121.06 MiB \n                         1.44 MiB \n                    \n                    \n                    \n                         Shape \n                         (73, 354, 614) \n                         (1, 354, 535) \n                    \n                    \n                         Count \n                         1030 Tasks \n                         146 Chunks \n                    \n                    \n                     Type \n                     float64 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  614\n  354\n  73\n\n        \n    \nCoordinates: (14)time(time)<U20'2022-01-01T00:00:00Z' ... '2016...array(['2022-01-01T00:00:00Z', '2021-12-01T00:00:00Z', '2021-11-01T00:00:00Z',\n       '2021-10-01T00:00:00Z', '2021-09-01T00:00:00Z', '2021-08-01T00:00:00Z',\n       '2021-07-01T00:00:00Z', '2021-06-01T00:00:00Z', '2021-05-01T00:00:00Z',\n       '2021-04-01T00:00:00Z', '2021-03-01T00:00:00Z', '2021-02-01T00:00:00Z',\n       '2021-01-01T00:00:00Z', '2020-12-01T00:00:00Z', '2020-11-01T00:00:00Z',\n       '2020-10-01T00:00:00Z', '2020-09-01T00:00:00Z', '2020-08-01T00:00:00Z',\n       '2020-07-01T00:00:00Z', '2020-06-01T00:00:00Z', '2020-05-01T00:00:00Z',\n       '2020-04-01T00:00:00Z', '2020-03-01T00:00:00Z', '2020-02-01T00:00:00Z',\n       '2020-01-01T00:00:00Z', '2019-12-01T00:00:00Z', '2019-11-01T00:00:00Z',\n       '2019-10-01T00:00:00Z', '2019-09-01T00:00:00Z', '2019-08-01T00:00:00Z',\n       '2019-07-01T00:00:00Z', '2019-06-01T00:00:00Z', '2019-05-01T00:00:00Z',\n       '2019-04-01T00:00:00Z', '2019-03-01T00:00:00Z', '2019-02-01T00:00:00Z',\n       '2019-01-01T00:00:00Z', '2018-12-01T00:00:00Z', '2018-11-01T00:00:00Z',\n       '2018-10-01T00:00:00Z', '2018-09-01T00:00:00Z', '2018-08-01T00:00:00Z',\n       '2018-07-01T00:00:00Z', '2018-06-01T00:00:00Z', '2018-05-01T00:00:00Z',\n       '2018-04-01T00:00:00Z', '2018-03-01T00:00:00Z', '2018-02-01T00:00:00Z',\n       '2018-01-01T00:00:00Z', '2017-12-01T00:00:00Z', '2017-11-01T00:00:00Z',\n       '2017-10-01T00:00:00Z', '2017-09-01T00:00:00Z', '2017-08-01T00:00:00Z',\n       '2017-07-01T00:00:00Z', '2017-06-01T00:00:00Z', '2017-05-01T00:00:00Z',\n       '2017-04-01T00:00:00Z', '2017-03-01T00:00:00Z', '2017-02-01T00:00:00Z',\n       '2017-01-01T00:00:00Z', '2016-12-01T00:00:00Z', '2016-11-01T00:00:00Z',\n       '2016-10-01T00:00:00Z', '2016-09-01T00:00:00Z', '2016-08-01T00:00:00Z',\n       '2016-07-01T00:00:00Z', '2016-06-01T00:00:00Z', '2016-05-01T00:00:00Z',\n       '2016-04-01T00:00:00Z', '2016-03-01T00:00:00Z', '2016-02-01T00:00:00Z',\n       '2016-01-01T00:00:00Z'], dtype='<U20')id(time)<U45'OMI_trno2_monthly_0.10x0.10_202...array(['OMI_trno2_monthly_0.10x0.10_202201_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202112_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202111_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202110_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202109_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202108_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202107_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202106_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202105_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202104_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202103_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202102_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202101_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202012_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202011_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202010_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202009_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202008_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202007_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_202006_Col3_V4.nc',\n...\n       'OMI_trno2_monthly_0.10x0.10_201708_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201707_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201706_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201705_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201704_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201703_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201702_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201701_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201612_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201611_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201610_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201609_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201608_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201607_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201606_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201605_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201604_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201603_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201602_Col3_V4.nc',\n       'OMI_trno2_monthly_0.10x0.10_201601_Col3_V4.nc'], dtype='<U45')band()<U11'cog_default'array('cog_default', dtype='<U11')x(x)float6473.7 73.8 73.9 ... 134.9 135.0axis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 73.7,  73.8,  73.9, ..., 134.8, 134.9, 135. ])y(y)float6453.5 53.4 53.3 ... 18.4 18.3 18.2axis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([53.5, 53.4, 53.3, ..., 18.4, 18.3, 18.2])end_datetime(time)<U20'2022-01-31T00:00:00Z' ... '2016...array(['2022-01-31T00:00:00Z', '2021-12-31T00:00:00Z',\n       '2021-11-30T00:00:00Z', '2021-10-31T00:00:00Z',\n       '2021-09-30T00:00:00Z', '2021-08-31T00:00:00Z',\n       '2021-07-31T00:00:00Z', '2021-06-30T00:00:00Z',\n       '2021-05-31T00:00:00Z', '2021-04-30T00:00:00Z',\n       '2021-03-31T00:00:00Z', '2021-02-28T00:00:00Z',\n       '2021-01-31T00:00:00Z', '2020-12-31T00:00:00Z',\n       '2020-11-30T00:00:00Z', '2020-10-31T00:00:00Z',\n       '2020-09-30T00:00:00Z', '2020-08-31T00:00:00Z',\n       '2020-07-31T00:00:00Z', '2020-06-30T00:00:00Z',\n       '2020-05-31T00:00:00Z', '2020-04-30T00:00:00Z',\n       '2020-03-31T00:00:00Z', '2020-02-29T00:00:00Z',\n       '2020-01-31T00:00:00Z', '2019-12-31T00:00:00Z',\n       '2019-11-30T00:00:00Z', '2019-10-31T00:00:00Z',\n       '2019-09-30T00:00:00Z', '2019-08-31T00:00:00Z',\n       '2019-07-31T00:00:00Z', '2019-06-30T00:00:00Z',\n       '2019-05-31T00:00:00Z', '2019-04-30T00:00:00Z',\n       '2019-03-31T00:00:00Z', '2019-02-28T00:00:00Z',\n       '2019-01-31T00:00:00Z', '2018-12-31T00:00:00Z',\n       '2018-11-30T00:00:00Z', '2018-10-31T00:00:00Z',\n       '2018-09-30T00:00:00Z', '2018-08-31T00:00:00Z',\n       '2018-07-31T00:00:00Z', '2018-06-30T00:00:00Z',\n       '2018-05-31T00:00:00Z', '2018-04-30T00:00:00Z',\n       '2018-03-31T00:00:00Z', '2018-02-28T00:00:00Z',\n       '2018-01-31T00:00:00Z', '2017-12-31T00:00:00Z',\n       '2017-11-30T00:00:00Z', '2017-10-31T00:00:00Z',\n       '2017-09-30T00:00:00Z', '2017-08-31T00:00:00Z',\n       '2017-07-31T00:00:00Z', '2017-06-30T00:00:00Z',\n       '2017-05-31T00:00:00Z', '2017-04-30T00:00:00Z',\n       '2017-03-31T00:00:00Z', '2017-02-28T00:00:00Z',\n       '2017-01-31T00:00:00Z', '2016-12-31T00:00:00Z',\n       '2016-11-30T00:00:00Z', '2016-10-31T00:00:00Z',\n       '2016-09-30T00:00:00Z', '2016-08-31T00:00:00Z',\n       '2016-07-31T00:00:00Z', '2016-06-30T00:00:00Z',\n       '2016-05-31T00:00:00Z', '2016-04-30T00:00:00Z',\n       '2016-03-31T00:00:00Z', '2016-02-29T00:00:00Z',\n       '2016-01-31T00:00:00Z'], dtype='<U20')proj:epsg()int644326array(4326)proj:transform()object{0.1, 0.0, 1.0, -0.1, -180.0, 90.0}array({0.1, 0.0, 1.0, -0.1, -180.0, 90.0}, dtype=object)proj:geometry()object{'type': 'Polygon', 'coordinates...array({'type': 'Polygon', 'coordinates': [[[-180.0, -90.0], [180.0, -90.0], [180.0, 90.0], [-180.0, 90.0], [-180.0, -90.0]]]},\n      dtype=object)start_datetime(time)<U20'2022-01-01T00:00:00Z' ... '2016...array(['2022-01-01T00:00:00Z', '2021-12-01T00:00:00Z',\n       '2021-11-01T00:00:00Z', '2021-10-01T00:00:00Z',\n       '2021-09-01T00:00:00Z', '2021-08-01T00:00:00Z',\n       '2021-07-01T00:00:00Z', '2021-06-01T00:00:00Z',\n       '2021-05-01T00:00:00Z', '2021-04-01T00:00:00Z',\n       '2021-03-01T00:00:00Z', '2021-02-01T00:00:00Z',\n       '2021-01-01T00:00:00Z', '2020-12-01T00:00:00Z',\n       '2020-11-01T00:00:00Z', '2020-10-01T00:00:00Z',\n       '2020-09-01T00:00:00Z', '2020-08-01T00:00:00Z',\n       '2020-07-01T00:00:00Z', '2020-06-01T00:00:00Z',\n       '2020-05-01T00:00:00Z', '2020-04-01T00:00:00Z',\n       '2020-03-01T00:00:00Z', '2020-02-01T00:00:00Z',\n       '2020-01-01T00:00:00Z', '2019-12-01T00:00:00Z',\n       '2019-11-01T00:00:00Z', '2019-10-01T00:00:00Z',\n       '2019-09-01T00:00:00Z', '2019-08-01T00:00:00Z',\n       '2019-07-01T00:00:00Z', '2019-06-01T00:00:00Z',\n       '2019-05-01T00:00:00Z', '2019-04-01T00:00:00Z',\n       '2019-03-01T00:00:00Z', '2019-02-01T00:00:00Z',\n       '2019-01-01T00:00:00Z', '2018-12-01T00:00:00Z',\n       '2018-11-01T00:00:00Z', '2018-10-01T00:00:00Z',\n       '2018-09-01T00:00:00Z', '2018-08-01T00:00:00Z',\n       '2018-07-01T00:00:00Z', '2018-06-01T00:00:00Z',\n       '2018-05-01T00:00:00Z', '2018-04-01T00:00:00Z',\n       '2018-03-01T00:00:00Z', '2018-02-01T00:00:00Z',\n       '2018-01-01T00:00:00Z', '2017-12-01T00:00:00Z',\n       '2017-11-01T00:00:00Z', '2017-10-01T00:00:00Z',\n       '2017-09-01T00:00:00Z', '2017-08-01T00:00:00Z',\n       '2017-07-01T00:00:00Z', '2017-06-01T00:00:00Z',\n       '2017-05-01T00:00:00Z', '2017-04-01T00:00:00Z',\n       '2017-03-01T00:00:00Z', '2017-02-01T00:00:00Z',\n       '2017-01-01T00:00:00Z', '2016-12-01T00:00:00Z',\n       '2016-11-01T00:00:00Z', '2016-10-01T00:00:00Z',\n       '2016-09-01T00:00:00Z', '2016-08-01T00:00:00Z',\n       '2016-07-01T00:00:00Z', '2016-06-01T00:00:00Z',\n       '2016-05-01T00:00:00Z', '2016-04-01T00:00:00Z',\n       '2016-03-01T00:00:00Z', '2016-02-01T00:00:00Z',\n       '2016-01-01T00:00:00Z'], dtype='<U20')proj:shape()object{1800, 3600}array({1800, 3600}, dtype=object)proj:bbox()object{90.0, 180.0, -90.0, -180.0}array({90.0, 180.0, -90.0, -180.0}, dtype=object)epsg()int644326array(4326)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :73.65000000000002 0.09999999999999998 0.0 53.55 0.0 -0.09999999999999999array(0)Attributes: (2)spec :RasterSpec(epsg=4326, bounds=(-180.0, -90.0, 180.0, 90.0), resolutions_xy=(0.1, 0.1))resolution :0.1\n\n\n\n# Group data into months\ndates = data_band.groupby('time')\n\n\n# Average over entire spatial bounding box for each month\nmeans = dates.mean(dim=('x', 'y'))\n\n\nmeans.plot()"
  },
  {
    "objectID": "timeseries-stac-api.html",
    "href": "timeseries-stac-api.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "This notebook demonstrates how to generate a timeseries using STAC API statistics endpoints.\n\nAuthor: Leo Thomas\nLasted Updated Date: June 29, 2022\n\n\nimport concurrent.futures\nimport datetime as dt\nfrom ipyleaflet import basemaps, Map, GeoJSON\nimport json\nimport requests as re\nimport matplotlib.pyplot as plt\nimport pprint\nimport time\n\nSTAC_API_URL = \"https://staging-stac.delta-backend.xyz\"\nRASTER_API_URL = \"https://staging-raster.delta-backend.xyz\""
  },
  {
    "objectID": "timeseries-stac-api.html#discover-data-using-the-stac-endpoint",
    "href": "timeseries-stac-api.html#discover-data-using-the-stac-endpoint",
    "title": "VEDA Documentation",
    "section": "Discover data using the STAC endpoint",
    "text": "Discover data using the STAC endpoint\n\nre.get(f\"{STAC_API_URL}/collections/{collection}\").json()\n\n{'id': 'no2-monthly',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly'}],\n 'title': 'NO₂',\n 'extent': {'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'temporal': {'interval': [['2016-01-01T00:00:00Z',\n     '2022-01-01T00:00:00Z']]}},\n 'license': 'MIT',\n 'summaries': {'datetime': ['2016-01-01T00:00:00Z', '2022-05-01T00:00:00Z'],\n  'cog_default': {'max': 50064805976866816, 'min': -6618294421291008}},\n 'description': 'Darker colors indicate higher nitrogen dioxide (NO₂) levels and more activity. Lighter colors indicate lower levels of NO₂ and less activity. Missing pixels indicate areas of no data most likely associated with cloud cover or snow.',\n 'item_assets': {'cog_default': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Default COG Layer',\n   'description': 'Cloud optimized default layer to display on map'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': ['https://stac-extensions.github.io/item-assets/v1.0.0/schema.json'],\n 'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month'}"
  },
  {
    "objectID": "timeseries-stac-api.html#describe-the-periodic-nature-of-the-data",
    "href": "timeseries-stac-api.html#describe-the-periodic-nature-of-the-data",
    "title": "VEDA Documentation",
    "section": "Describe the periodic nature of the data",
    "text": "Describe the periodic nature of the data\n\npprint.pprint({\n    k:v for k,v in re.get(f\"{STAC_API_URL}/collections/no2-monthly\").json().items()\n    if k in [\"dashboard:is_periodic\", \"dashboard:time_density\", \"summaries\"]\n})\n\n{'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month',\n 'summaries': {'cog_default': {'max': 50064805976866816,\n                               'min': -6618294421291008},\n               'datetime': ['2016-01-01T00:00:00Z', '2022-05-01T00:00:00Z']}}"
  },
  {
    "objectID": "timeseries-stac-api.html#load-and-inspect-one-of-the-stac-items",
    "href": "timeseries-stac-api.html#load-and-inspect-one-of-the-stac-items",
    "title": "VEDA Documentation",
    "section": "Load and inspect one of the STAC items",
    "text": "Load and inspect one of the STAC items\nThis step is just for demonstration, to inspect what an item looks like.\n\nitems = re.get(f\"{STAC_API_URL}/collections/{collection}/items?limit=100\").json()[\"features\"]\nitems[0]\n\n{'id': 'OMI_trno2_monthly_0.10x0.10_202205_Col3_V4.nc',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://staging-stac.delta-backend.xyz/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://staging-stac.delta-backend.xyz/collections/no2-monthly/items/OMI_trno2_monthly_0.10x0.10_202205_Col3_V4.nc'}],\n 'assets': {'cog_default': {'href': 's3://veda-data-store-staging/no2-monthly/OMI_trno2_monthly_0.10x0.10_202205_Col3_V4.nc.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'raster:bands': [{'scale': 1.0,\n     'nodata': -1.2676506002282294e+30,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 16009167399550976,\n      'min': -2647376502194176.0,\n      'count': 11,\n      'buckets': [254, 378517, 28452, 2275, 668, 196, 31, 15, 5, 2]},\n     'statistics': {'mean': 420353736794736.56,\n      'stddev': 570417159377508.8,\n      'maximum': 16009167399550976,\n      'minimum': -2647376502194176.0,\n      'valid_percent': 78.28044891357422}}]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180.0, -90.0],\n    [180.0, -90.0],\n    [180.0, 90.0],\n    [-180.0, 90.0],\n    [-180.0, -90.0]]]},\n 'collection': 'no2-monthly',\n 'properties': {'datetime': None,\n  'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n  'proj:epsg': 4326,\n  'proj:shape': [1800, 3600],\n  'end_datetime': '2022-05-31T00:00:00Z',\n  'proj:geometry': {'type': 'Polygon',\n   'coordinates': [[[-180.0, -90.0],\n     [180.0, -90.0],\n     [180.0, 90.0],\n     [-180.0, 90.0],\n     [-180.0, -90.0]]]},\n  'proj:transform': [0.1, 0.0, -180.0, 0.0, -0.1, 90.0, 0.0, 0.0, 1.0],\n  'start_datetime': '2022-05-01T00:00:00Z'},\n 'stac_version': '1.0.0',\n 'stac_extensions': ['https://stac-extensions.github.io/projection/v1.0.0/schema.json',\n  'https://stac-extensions.github.io/raster/v1.1.0/schema.json']}"
  },
  {
    "objectID": "timeseries-stac-api.html#define-a-bounding-box",
    "href": "timeseries-stac-api.html#define-a-bounding-box",
    "title": "VEDA Documentation",
    "section": "Define a bounding box",
    "text": "Define a bounding box\nWe’ve defined a bounding box for France in this case.\n\nbounding_box_france = { \n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n            [\n              -5.4534286,\n              41.2632185\n            ],\n            [\n              9.8678344,\n              41.2632185\n            ],\n            [\n              9.8678344,\n              51.268318\n            ],\n            [\n              -5.4534286,\n              51.268318\n            ],\n            [\n              -5.4534286,\n              41.2632185\n            ]\n        ]]\n    }\n}"
  },
  {
    "objectID": "timeseries-stac-api.html#map-the-bounding-box",
    "href": "timeseries-stac-api.html#map-the-bounding-box",
    "title": "VEDA Documentation",
    "section": "Map the bounding box",
    "text": "Map the bounding box\nThis step is for visual inspection of the bounding box.\n\nm = Map(\n    basemap=basemaps.OpenStreetMap.Mapnik,\n    center=(47,4),\n    zoom=3\n)\ngeo = GeoJSON(\n    data=bounding_box_france,\n    style={\"color\": \"red\", \"fillOpacity\": 0}\n)\nm.add_layer(geo)\nm"
  },
  {
    "objectID": "timeseries-stac-api.html#use-cogstatistics-to-get-data-for-the-bounding-box",
    "href": "timeseries-stac-api.html#use-cogstatistics-to-get-data-for-the-bounding-box",
    "title": "VEDA Documentation",
    "section": "Use /cog/statistics to get data for the bounding box",
    "text": "Use /cog/statistics to get data for the bounding box\nFirst, we create a generate_stats function and then we call it with the bounding box defined for France.\n\ndef generate_stats(items, bounding_box):\n    stats = [\n        {\n            **re.post(\n                f\"{RASTER_API_URL}/cog/statistics\", \n                params={\n                    \"url\":item[\"assets\"][\"cog_default\"][\"href\"]\n                },\n                json=bounding_box\n            ).json()[\"properties\"], \n             \"start_datetime\":item[\"properties\"][\"start_datetime\"]\n        }\n        for item in items\n    ]\n    return stats"
  },
  {
    "objectID": "timeseries-stac-api.html#generate-and-estimate-time-to-generate-statistics",
    "href": "timeseries-stac-api.html#generate-and-estimate-time-to-generate-statistics",
    "title": "VEDA Documentation",
    "section": "Generate and estimate time to generate statistics",
    "text": "Generate and estimate time to generate statistics\nThis may take a minute, depending on the network.\n\nstart = time.time()\nstats = generate_stats(items, bounding_box_france)\nend = time.time()\nprint(f\"Elapsed time for small bounding box (france) {round(end-start,2)} seconds. Items queried: {len(items)}\")\n\nElapsed time for small bounding box (france) 124.64 seconds. Items queried: 77"
  },
  {
    "objectID": "timeseries-stac-api.html#inspect-one-result",
    "href": "timeseries-stac-api.html#inspect-one-result",
    "title": "VEDA Documentation",
    "section": "Inspect one result",
    "text": "Inspect one result\n\nstats[1]\n\n{'statistics': {'1': {'min': -1686681841303552.0,\n   'max': 8037704876949504.0,\n   'mean': 1719699112594799.0,\n   'count': 15200.0,\n   'sum': 2.6139426511440945e+19,\n   'std': 1311942344229939.8,\n   'median': 1358823029735424.0,\n   'majority': 537238232367104.0,\n   'minority': -1686681841303552.0,\n   'unique': 15194.0,\n   'histogram': [[7.0,\n     568.0,\n     6212.0,\n     4554.0,\n     2093.0,\n     819.0,\n     437.0,\n     271.0,\n     182.0,\n     57.0],\n    [-1686681841303552.0,\n     -714243169478246.4,\n     258195502347059.25,\n     1230634174172365.0,\n     2203072845997670.5,\n     3175511517822976.0,\n     4147950189648282.0,\n     5120388861473587.0,\n     6092827533298893.0,\n     7065266205124199.0,\n     8037704876949504.0]],\n   'valid_percent': 99.35,\n   'masked_pixels': 100.0,\n   'valid_pixels': 15200.0,\n   'percentile_98': 5865060032776768.0,\n   'percentile_2': 116917669524930.58}},\n 'start_datetime': '2022-04-01T00:00:00Z'}\n\n\n\ndates = [dt.datetime.strptime(stat[\"start_datetime\"], \"%Y-%m-%dT%H:%M:%SZ\") for stat in stats]\nmeans = [stat[\"statistics\"][\"1\"][\"mean\"] for stat in stats]\nstd_devs = [stat[\"statistics\"][\"1\"][\"std\"] for stat in stats]\nupper_bounds = [m+s for (m,s) in zip(means, std_devs)]\nlower_bounds = [m-s for (m,s) in zip(means, std_devs)]\n\n\nplt.plot(dates, means, 'black')\nplt.fill_between(dates, upper_bounds, lower_bounds, facecolor=\"lightgrey\", interpolate=True)\n\n<matplotlib.collections.PolyCollection at 0x18274a310>"
  },
  {
    "objectID": "hls-visualization.html",
    "href": "hls-visualization.html",
    "title": "VEDA Documentation",
    "section": "",
    "text": "Author: Alexandra Kirk\nLast Updated Date: June 30, 2022\n\nThis notebook demonstrates how to explore HLS data for a specific event, where an event can be charactized by its time and place. Geospatial imagery, such as HLS, is often used for analysis of changes correlated with an event.\n\nIdentify available dates within a bounding box, which is also an area of interest (AOI) in this example, for a given collection\nRegister a dynamic tiler search for an AOI and specific date range for a given collection\nExplore different options for displaying multi-band Harmonized Landsat and Sentinel (HLS) assets with the Raster API.\n\nAbout the Data\nA small subset of HLS data has been ingested to the VEDA datastore to visually explore data using the Raster API, which is a VEDA instance of (pgstac-titiler). This limited subset includes a two granules for dates before and after Hurricane Maria in 2017 and Hurricane Ida in 2021.\nNote about HLS datasets: The Sentinel and Landsat assets have been “harmonized” in the sense that these products have been generated to use the same spatial resolution and grid system. Thus these 2 HLS S30 and L30 productscan be used interchangeably in algorithms. However, the individual band assets are specific to each provider. This notebook focuses on displaying HLS data with a dynamic tiler so separate examples are provided for rendering the unique band assets of each collection.\nAdditional Resources\nHLSL30 Dataset Landing Page\nLandsat 8 Bands and Combinations Blog\nHLSS30 Dataset Landing Page\nSentinel 2 Bands and Combinations Blog\nCQL2 STAC-API Examples\n\nimport json\nimport requests\nfrom folium import Map, TileLayer\n\n\n\nThe notebook examples below focus on HLS S30 data for Hurricane Ida, but Hurricane Maria and L30 parameters are provided below for further exploration.\n\n# Endpoints\nSTAC_API_URL = \"https://staging-stac.delta-backend.com\"\nRASTER_API_URL = \"https://staging-raster.delta-backend.com\" \n\n# Harmonized Sentinel collection id and configuration info\ns30_collection_id = \"hls-s30-002-ej-reprocessed\"\ns30_swir_assets = [\"B12\",\"B8A\",\"B04\"]\ns30_vegetation_index_assets = [\"B08\", \"B04\"]\ns30_vegetation_index_expression = \"(B08-B04)/(B08+B04)\"\ns30_vegetation_index_rescaling = \"0,1\"\ns30_vegetation_index_colormap = \"rdylgn\"\n\n# Harmonized Landsat collection id and map configuration info\nl30_collection_id = \"hls-l30-002-ej-reprocessed\"\nl30_swir_assets = [\"B07\",\"B05\",\"B04\"]\nl30_ndwi_expression = \"(B03-B05)/(B03+B05)\"\nl30_ndwi_assets = [\"B03\", \"B05\"]\nl30_ndwi_rescaling = \"0,1\"\nl30_ndwi_colormap = \"spectral\"\n\n# Search criteria for events in both HLS Events collections\nmaria_bbox = [-66.167596, 17.961538, -65.110098, 18.96772]\nmaria_temporal_range = [\"2017-06-06T00:00:00Z\", \"2017-11-30T00:00:00Z\"]\n\nida_bbox = [-90.932637, 29.705366, -89.766437, 30.71627]\nida_temporal_range = [\"2021-07-01T00:00:00Z\", \"2021-10-28T00:00:00Z\"]\n\n\n\nThis search body can be used with both the STAC and Raster APIs. We will restrict the temporal range for mosaicing.\n\ncollections_filter = {\n    \"op\": \"=\", \n    \"args\" : [{ \"property\": \"collection\" }, s30_collection_id]\n}\n\nspatial_filter = {\n    \"op\": \"s_intersects\",\n    \"args\": [\n        {\"property\": \"bbox\"}, ida_bbox\n    ]\n}\n\ntemporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : ida_temporal_range }\n    ]\n}\n\n# Additional filters can be applied for other search criteria like <= maximum eo:cloud_cover in item properties\ncloud_filter = {\n    \"op\": \"<=\",\n    \"args\": [\n        {\"property\": \"eo:cloud_cover\"},\n        80\n    ]\n}\n\n# Specify cql2-json filter language in search body and add context for a summary of matched results\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"context\": \"on\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            spatial_filter,\n            temporal_filter,\n            cloud_filter\n        ]\n    }\n}\n\n# Note this search body can also be used for a stac item search \nstac_items_response = requests.post(\n    f\"{STAC_API_URL}/search\",\n    json=search_body,\n).json()\n\n# Check how many items were matched in searc\nprint(\"search context:\", stac_items_response[\"context\"])\n\n# Iterate over search results to get an array of unique item datetimes\ndatetimes = []\nfeatures = stac_items_response[\"features\"]\ndatetimes += [item[\"properties\"][\"datetime\"] for item in features]\nnext_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), None)\nwhile next_link:\n    stac_items_response = requests.post(\n        f\"{STAC_API_URL}/search\",\n        json=next_link[\"body\"],\n    ).json()\n    features = stac_items_response[\"features\"]\n    datetimes += [item[\"properties\"][\"datetime\"] for item in features]\n    next_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), False)\n\nsorted(datetimes)\n\nsearch context: {'limit': 10, 'matched': 14, 'returned': 10}\n\n\n['2021-07-14T16:55:15.122720Z',\n '2021-07-24T16:55:15.112940Z',\n '2021-07-29T16:55:16.405890Z',\n '2021-08-08T16:55:15.798510Z',\n '2021-08-13T16:55:13.394950Z',\n '2021-08-23T16:55:11.785040Z',\n '2021-09-02T16:55:09.568600Z',\n '2021-09-07T16:55:13.430530Z',\n '2021-09-22T16:55:10.763010Z',\n '2021-09-27T16:55:17.027350Z',\n '2021-10-07T16:55:18.213640Z',\n '2021-10-12T16:55:14.209080Z',\n '2021-10-17T16:55:18.517600Z',\n '2021-10-22T16:55:14.670710Z']\n\n\n\n\n\n\nThe VEDA backend is based on eoAPI, an application for searching and tiling earth observation STAC records. The application uses titiler-pgstac for dynamically mosaicing cloud optimized data from a registerd STAC API search.\nTo use the dynamic tiler, register a STAC item search and then use the registered search ID to dynamically mosaic the search results on the map.\n\n\nThe registered search id can be reused for alternate map layer visualizations.\n\n# Restricted date range \nrestricted_temporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : [ \"2021-10-16T00:00:00Z\", \"2021-10-18T00:00:00Z\"] }\n    ]\n}\n\n# Specify cql2-json filter language in search body\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            spatial_filter,\n            restricted_temporal_filter\n        ]\n    }\n}\n\nmosaic_response = requests.post(\n    f\"{RASTER_API_URL}/mosaic/register\",\n    json=search_body,\n).json()\nprint(json.dumps(mosaic_response, indent=1))\n\n{\n \"searchid\": \"7743bcb31bff7151aff7e5508785fce1\",\n \"links\": [\n  {\n   \"rel\": \"metadata\",\n   \"type\": \"application/json\",\n   \"href\": \"https://staging-raster.delta-backend.com/mosaic/7743bcb31bff7151aff7e5508785fce1/info\"\n  },\n  {\n   \"rel\": \"tilejson\",\n   \"type\": \"application/json\",\n   \"href\": \"https://staging-raster.delta-backend.com/mosaic/7743bcb31bff7151aff7e5508785fce1/tilejson.json\"\n  }\n ]\n}\n\n\n\n\n\nSee the raster-api/docs for more formatting options\n\n\n\n\nNote in the example below the band assets for HLS S30 are selected. The equivalent SWIR band assets for L30 are provided at the top of this notebook.\n\n# Set up format for Map API url\n# Get base url for tiler from the register mosaic request\ntiles_href = next(link[\"href\"] for link in mosaic_response[\"links\"] if link[\"rel\"]==\"tilejson\")\n\n# Add additional map formatting parameters to tiles url\ntilejson_response = requests.get(\n    tiles_href,\n    params={\n        # Info to add to the tilejson response\n        \"minzoom\": 6,\n        \"maxzoom\": 12,\n        \"post_process\": \"swir\",\n        \"assets\": s30_swir_assets\n    }\n).json()\nprint(json.dumps(tilejson_response, indent=1))\n\n{\n \"tilejson\": \"2.2.0\",\n \"name\": \"7743bcb31bff7151aff7e5508785fce1\",\n \"version\": \"1.0.0\",\n \"scheme\": \"xyz\",\n \"tiles\": [\n  \"https://staging-raster.delta-backend.com/mosaic/tiles/7743bcb31bff7151aff7e5508785fce1/WebMercatorQuad/{z}/{x}/{y}@1x?post_process=swir&assets=B12&assets=B8A&assets=B04\"\n ],\n \"minzoom\": 6,\n \"maxzoom\": 12,\n \"bounds\": [\n  -180.0,\n  -85.0511287798066,\n  180.0,\n  85.0511287798066\n ],\n \"center\": [\n  0.0,\n  0.0,\n  6\n ]\n}\n\n\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nzoom_start = 11\nm = Map(\n    tiles=\"OpenStreetMap\",\n    location=((ida_bbox[1] + ida_bbox[3]) / 2,(ida_bbox[0] + ida_bbox[2]) / 2),\n    zoom_start=zoom_start\n)\n\n# Add the formatted map layer\nmap_layer = TileLayer(\n    tiles=tilejson_response[\"tiles\"][0],\n    attr=\"Mosaic\",  \n)\nmap_layer.add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n\nThe titiler/raster-api supports user defined band combinations, band math expressions, rescaling, band index, resampling and more.\n\n# Set up format for Map API url\n# Get base url for tiler from the register mosaic request\ntiles_href = next(link[\"href\"] for link in mosaic_response[\"links\"] if link[\"rel\"]==\"tilejson\")\n\n# Add additional map formatting parameters to tiles url\ntilejson_response = requests.get(\n    tiles_href,\n    params={\n        # Info to add to the tilejson response\n        \"minzoom\": 6,\n        \"maxzoom\": 12,\n        \"assets\": s30_vegetation_index_assets,\n        \"expression\": s30_vegetation_index_expression,\n        \"rescale\": s30_vegetation_index_rescaling,\n        \"colormap_name\": s30_vegetation_index_colormap\n    }\n).json()\nprint(json.dumps(tilejson_response, indent=1))\n\n{\n \"tilejson\": \"2.2.0\",\n \"name\": \"7743bcb31bff7151aff7e5508785fce1\",\n \"version\": \"1.0.0\",\n \"scheme\": \"xyz\",\n \"tiles\": [\n  \"https://staging-raster.delta-backend.com/mosaic/tiles/7743bcb31bff7151aff7e5508785fce1/WebMercatorQuad/{z}/{x}/{y}@1x?assets=B08&assets=B04&expression=%28B08-B04%29%2F%28B08%2BB04%29&rescale=0%2C1&colormap_name=rdylgn\"\n ],\n \"minzoom\": 6,\n \"maxzoom\": 12,\n \"bounds\": [\n  -180.0,\n  -85.0511287798066,\n  180.0,\n  85.0511287798066\n ],\n \"center\": [\n  0.0,\n  0.0,\n  6\n ]\n}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nzoom_start = 11\nm = Map(\n    tiles=\"OpenStreetMap\",\n    location=((ida_bbox[1] + ida_bbox[3]) / 2,(ida_bbox[0] + ida_bbox[2]) / 2),\n    zoom_start=zoom_start\n)\n\n# Add the formatted map layer\nmap_layer = TileLayer(\n    tiles=tilejson_response[\"tiles\"][0],\n    attr=\"Mosaic\",  \n)\nmap_layer.add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n\n\n\ncollections_filter = {\n    \"op\": \"=\", \n    \"args\" : [{ \"property\": \"collection\" }, l30_collection_id]\n}\n\nspatial_filter = {\n    \"op\": \"s_intersects\",\n    \"args\": [\n        {\"property\": \"bbox\"}, maria_bbox\n    ]\n}\n\ntemporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : maria_temporal_range }\n    ]\n}\n\n# Additional filters can be applied for other search criteria like <= maximum eo:cloud_cover in item properties\ncloud_filter = {\n    \"op\": \"<=\",\n    \"args\": [\n        {\"property\": \"eo:cloud_cover\"},\n        80\n    ]\n}\n\n# Specify cql2-json filter language in search body and add context for a summary of matched results\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"context\": \"on\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            temporal_filter,\n            cloud_filter\n        ]\n    }\n}\n\n# Note this search body can also be used for a stac item search \nstac_items_response = requests.post(\n    f\"{STAC_API_URL}/search\",\n    json=search_body,\n).json()\n\n# Check how many items were matched in searc\nprint(\"search context:\", stac_items_response[\"context\"])\n\n# Iterate over search results to get an array of unique item datetimes\ndatetimes = []\nfeatures = stac_items_response[\"features\"]\ndatetimes += [item[\"properties\"][\"datetime\"] for item in features]\nnext_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), None)\nwhile next_link:\n    stac_items_response = requests.post(\n        f\"{STAC_API_URL}/search\",\n        json=next_link[\"body\"],\n    ).json()\n    features = stac_items_response[\"features\"]\n    datetimes += [item[\"properties\"][\"datetime\"] for item in features]\n    next_link = next((link for link in stac_items_response[\"links\"] if link[\"rel\"] == \"next\"), False)\n\nsorted(datetimes)\n\nsearch context: {'limit': 10, 'matched': 9, 'returned': 9}\n\n\n['2017-06-06T14:43:41.335694Z',\n '2017-06-22T14:43:47.156698Z',\n '2017-07-24T14:43:56.898518Z',\n '2017-08-09T14:44:03.584741Z',\n '2017-08-25T14:44:07.854507Z',\n '2017-09-26T14:44:14.813967Z',\n '2017-10-12T14:44:19.576858Z',\n '2017-11-13T14:44:17.834919Z',\n '2017-11-29T14:44:11.126689Z']\n\n\n\n# Restricted date range \nrestricted_temporal_filter = {\n    \"op\": \"t_intersects\",\n    \"args\": [\n        { \"property\": \"datetime\" },\n        { \"interval\" : [ \"2017-10-11T00:00:00Z\", \"2017-10-13T00:00:00Z\"] }\n    ]\n}\n\n# Specify cql2-json filter language in search body\nsearch_body = {\n    \"filter-lang\": \"cql2-json\",\n    \"filter\": {\n        \"op\": \"and\",\n        \"args\": [\n            collections_filter,\n            spatial_filter,\n            restricted_temporal_filter\n        ]\n    }\n}\n\nmosaic_response = requests.post(\n    f\"{RASTER_API_URL}/mosaic/register\",\n    json=search_body,\n).json()\n\n# Set up format for Map API url\n# Get base url for tiler from the register mosaic request\ntiles_href = next(link[\"href\"] for link in mosaic_response[\"links\"] if link[\"rel\"]==\"tilejson\")\n\n# Add additional map formatting parameters to tiles url\ntilejson_response = requests.get(\n    tiles_href,\n    params={\n        # Info to add to the tilejson response\n        \"minzoom\": 6,\n        \"maxzoom\": 12,\n        \"assets\": l30_ndwi_assets,\n        \"expression\": l30_ndwi_expression,\n        \"rescale\": l30_ndwi_rescaling,\n        \"colormap_name\": \"viridis\"\n    }\n).json()\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nzoom_start = 11\nm = Map(\n    tiles=\"OpenStreetMap\",\n    location=((maria_bbox[1] + maria_bbox[3]) / 2,(maria_bbox[0] + maria_bbox[2]) / 2),\n    zoom_start=zoom_start\n)\n\n# Add the formatted map layer\nmap_layer = TileLayer(\n    tiles=tilejson_response[\"tiles\"][0],\n    attr=\"Mosaic\",  \n)\nmap_layer.add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  }
]